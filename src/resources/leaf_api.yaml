openapi: 3.0.3
info:
  title: Leaf Unified API
  version: 1.0.0
  description: "Auto\u2011generated by openAPI_generator.py"
servers:
- url: https://api.withleaf.io/services
paths:
  /alerts/api/alerts/webhooks:
    post:
      summary: Create a webhook
      operationId: createWebhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookRequest'
      responses:
        '201':
          description: Webhook created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '400':
          description: Bad request (e.g., eventRegisteredTwice)
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Alerts API
    get:
      summary: Get all webhooks
      operationId: listWebhooks
      responses:
        '200':
          description: Array of webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookArray'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Alerts API
  /alerts/api/alerts/webhooks/{id}:
    get:
      summary: Get a webhook
      operationId: getWebhook
      parameters:
      - $ref: '#/components/parameters/WebhookId'
      responses:
        '200':
          description: Requested webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '404':
          description: Webhook not found
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Alerts API
    delete:
      summary: Delete a webhook
      operationId: deleteWebhook
      parameters:
      - $ref: '#/components/parameters/WebhookId'
      responses:
        '204':
          description: Webhook deleted
        '404':
          description: Webhook not found
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Alerts API
  /alerts/api/alerts/webhooks/failed-calls:
    get:
      summary: Get failed calls for webhooks
      operationId: listFailedCalls
      responses:
        '200':
          description: List of failed delivery attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailedCallsResponse'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Alerts API
  /alerts/api/alerts/arcgis:
    post:
      summary: Create an ArcGIS alert (beta)
      operationId: createArcgisAlert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArcgisAlertRequest'
      responses:
        '201':
          description: ArcGIS alert created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcgisAlert'
        '400':
          description: Bad request (e.g., eventRegisteredTwice)
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Alerts API
  /beta/api/users/{leafUserId}/machines:
    get:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Get all machines
      operationId: getMachines
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/size'
      - $ref: '#/components/parameters/sort'
      - name: name
        in: query
        description: Filter by machine name.
        schema:
          type: string
      - name: provider
        in: query
        description: Filter by provider.
        schema:
          type: string
          enum:
          - JohnDeere
          - Stara
          - CNHI
          - Leaf
      - name: providerOrganizationId
        in: query
        description: Provider-side organization id.
        schema:
          type: string
      - name: serialNumber
        in: query
        description: Filter by serial number.
        schema:
          type: string
      - name: originType
        in: query
        description: Machine origin.
        schema:
          type: string
          enum:
          - USER_CREATED
          - FILE_POOLED
          - PROVIDER_POOLED
      - name: createdTime
        in: query
        description: Exact creation time (ISO-8601).
        schema:
          type: string
          format: date-time
      - name: beforeCreatedTime
        in: query
        description: Return records created before this time (ISO-8601).
        schema:
          type: string
          format: date-time
      - name: afterCreatedTime
        in: query
        description: Return records created after this time (ISO-8601).
        schema:
          type: string
          format: date-time
      - name: vin
        in: query
        description: Vehicle Identification Number.
        schema:
          type: string
      responses:
        '200':
          description: A list of machines.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
      security:
      - bearerAuth: []
    post:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Create a machine
      operationId: createMachine
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineInput'
      responses:
        '201':
          description: Machine created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/machines/{machineId}:
    get:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Get a machine
      operationId: getMachine
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/machineId'
      responses:
        '200':
          description: Machine details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
      security:
      - bearerAuth: []
    patch:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Update a machine
      operationId: updateMachine
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/machineId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineUpdate'
      responses:
        '200':
          description: Updated machine.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
      security:
      - bearerAuth: []
    delete:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Delete a machine
      operationId: deleteMachine
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/machineId'
      responses:
        '204':
          description: Machine deleted.
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/machines/{machineId}/files:
    get:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Get machine files
      operationId: getMachineFiles
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/machineId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/size'
      - $ref: '#/components/parameters/sort'
      - name: leafFileId
        in: query
        schema:
          type: string
          format: uuid
      - name: originType
        in: query
        schema:
          type: string
          enum:
          - USER_CREATED
          - FILE_POOLED
          - PROVIDER_POOLED
      - name: createdTime
        in: query
        schema:
          type: string
          format: date-time
      - name: beforeCreatedTime
        in: query
        schema:
          type: string
          format: date-time
      - name: afterCreatedTime
        in: query
        schema:
          type: string
          format: date-time
      - name: startTime
        in: query
        schema:
          type: string
          format: date-time
      - name: endTime
        in: query
        schema:
          type: string
          format: date-time
      - name: beforeStartTime
        in: query
        schema:
          type: string
          format: date-time
      - name: afterStartTime
        in: query
        schema:
          type: string
          format: date-time
      - name: beforeEndTime
        in: query
        schema:
          type: string
          format: date-time
      - name: afterEndTime
        in: query
        schema:
          type: string
          format: date-time
      - name: distanceValue
        in: query
        schema:
          type: number
      - name: greaterThanDistanceValue
        in: query
        schema:
          type: number
      - name: lessThanDistanceValue
        in: query
        schema:
          type: number
      - name: distanceUnit
        in: query
        schema:
          type: string
          enum:
          - Mile
          - mile
          - Feet
          - ft
      responses:
        '200':
          description: List of machine files.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MachineFile'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/implements:
    get:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Get all implements
      operationId: getImplements
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/size'
      - $ref: '#/components/parameters/sort'
      - name: provider
        in: query
        schema:
          type: string
          enum:
          - JohnDeere
          - Trimble
      - name: providerImplementId
        in: query
        schema:
          type: string
      - name: providerOrganizationId
        in: query
        schema:
          type: string
      - name: createdTime
        in: query
        schema:
          type: string
          format: date-time
      - name: updatedTime
        in: query
        schema:
          type: string
          format: date-time
      - name: name
        in: query
        schema:
          type: string
      responses:
        '200':
          description: Array of implements.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Implement'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/implements/{implementId}:
    get:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Get an implement
      operationId: getImplement
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/implementId'
      responses:
        '200':
          description: Implement details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Implement'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/operators:
    get:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Get all operators
      operationId: getOperators
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/size'
      responses:
        '200':
          description: Array of operators.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operator'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/operators/{operatorId}:
    get:
      tags:
      - Leaf API_Reference_Beta_Assets API
      summary: Get an operator
      operationId: getOperator
      parameters:
      - $ref: '#/components/parameters/leafUserId'
      - $ref: '#/components/parameters/operatorId'
      responses:
        '200':
          description: Operator details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operator'
      security:
      - bearerAuth: []
  /beta/api/products:
    get:
      summary: Get all products
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - $ref: '#/components/parameters/LeafUserIdQ'
      - $ref: '#/components/parameters/Provider'
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/Size'
      - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: List of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/products/summary:
    get:
      summary: Get summarized products
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: path
        name: leafUserId
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: name
        description: Part of the product name.
        schema:
          type: string
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/Size'
      - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Summarized product list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductSummary'
      security:
      - bearerAuth: []
  /beta/api/products/search:
    get:
      summary: Search for products
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: query
        name: name
        required: true
        description: Partial or full product name to search.
        schema:
          type: string
      - $ref: '#/components/parameters/MaxResults'
      responses:
        '200':
          description: Search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
      security:
      - bearerAuth: []
  /beta/api/products/{id}:
    get:
      summary: Get a product
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Product details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      security:
      - bearerAuth: []
  /beta/api/products/matching/operations/{operationId}:
    get:
      summary: Get matching products from an operation
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: path
        name: operationId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Predicted/validated product matches for the operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductMatch'
      security:
      - bearerAuth: []
  /beta/api/products/matching/operations/{operationId}/matches/{matchId}:
    patch:
      summary: Update product match
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: path
        name: operationId
        required: true
        schema:
          type: string
      - in: path
        name: matchId
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
              - type: object
                required:
                - status
                properties:
                  status:
                    type: string
                    enum:
                    - VALIDATED
              - type: object
                required:
                - productId
                properties:
                  productId:
                    type: string
                    format: uuid
      responses:
        '200':
          description: Updated list of matches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductMatch'
      security:
      - bearerAuth: []
  /beta/api/products/matching/operations/{operationId}/matches/{matchId}/historical:
    get:
      summary: Get product match history
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: path
        name: operationId
        required: true
        schema:
          type: string
      - in: path
        name: matchId
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Historical changes for the product match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductMatchHistory'
      security:
      - bearerAuth: []
  /beta/api/varieties:
    get:
      summary: Get all varieties
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - $ref: '#/components/parameters/LeafUserIdQ'
      - $ref: '#/components/parameters/Provider'
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/Size'
      - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: List of varieties.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variety'
      security:
      - bearerAuth: []
  /beta/api/varieties/{id}:
    get:
      summary: Get a variety
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: Variety details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Variety'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/varieties/summary:
    get:
      summary: Get summarized varieties
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: path
        name: leafUserId
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: name
        description: Part of the variety name.
        schema:
          type: string
      - in: query
        name: crops
        description: Crop filter.
        schema:
          type: string
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/Size'
      - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Summarized varieties.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VarietySummary'
      security:
      - bearerAuth: []
  /beta/api/varieties/search:
    get:
      summary: Search for varieties
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: query
        name: name
        required: true
        description: Partial or full variety name.
        schema:
          type: string
      - $ref: '#/components/parameters/MaxResults'
      - in: query
        name: crop
        description: Crop name filter.
        schema:
          type: string
      responses:
        '200':
          description: Search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Variety'
      security:
      - bearerAuth: []
  /beta/api/tankMixes:
    get:
      summary: Get all tank mixes
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - $ref: '#/components/parameters/LeafUserIdQ'
      - $ref: '#/components/parameters/Provider'
      - $ref: '#/components/parameters/Page'
      - $ref: '#/components/parameters/Size'
      - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: List of tank mixes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TankMix'
      security:
      - bearerAuth: []
  /beta/api/tankMixes/search:
    get:
      summary: Search for tank mixes
      tags:
      - Leaf API_Reference_Beta_Input_Validator API
      parameters:
      - in: query
        name: name
        required: true
        description: Partial or full tank mix name.
        schema:
          type: string
      - $ref: '#/components/parameters/MaxResults'
      responses:
        '200':
          description: Search results.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TankMix'
      security:
      - bearerAuth: []
  /beta/api/users/{leafUserId}/layers:
    get:
      tags:
      - Leaf API_Reference_Beta_Layers API
      summary: Get all layers for a Leaf User
      description: Returns a paginated list of layers that belong to the specified
        Leaf User.
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Layers_API_leafUserId'
      - name: type
        in: query
        description: Filter the returned layers by type.
        schema:
          type: string
          enum:
          - TASSEL_COUNT
          - STAND_COUNT
          - NVDI
          - RGB
      - name: page
        in: query
        description: Zero-based index of the results page to return. Defaults to **0**.
        schema:
          type: integer
          minimum: 0
          default: 0
      - name: size
        in: query
        description: "Maximum number of items to include in the response (1\u2013\
          100). Defaults to **20** when omitted."
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      responses:
        '200':
          description: A JSON array of Layer objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Layer'
              examples:
                sample:
                  value:
                  - id: 96a098e0-f1d0-47e8-968d-9d55d54da114
                    leafUserId: 055c4d61-b1e2-4fa9-873c-23433a11c271
                    apiOwnerUsername: fabyan
                    type: RGB
                    origin: PROVIDER_POOLED
                    provider: Sentera
                    providerLayerId: vnoyi6a_FI_edovSouthernM_CV_prod_82f9b3d6_211018_151052
                    providerFieldId: ycof8zg_AS_edovSouthernM_CV_prod_a025df2d_211015_200456
                    name: QuickTile RGB
                    size: 159135298
                    md5: 7ff746c6f5f06fc25b46420328402bed
                    contentS3: URL
                    downloadContentS3: URL
                    createdTime: '2022-02-16T21:40:20.257Z'
                    leafFieldIds:
                    - f43ca7cc-c73a-43b9-8685-070b03876475
                    - edcf7b8b-913e-4e53-a0b5-91aa16699dfc
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /beta/api/users/{leafUserId}/layers/climateFieldView:
    post:
      tags:
      - Leaf API_Reference_Beta_Layers API
      summary: Upload a layer to Climate FieldView
      description: "Uploads a GeoTIFF layer file to Climate FieldView. Only **RGB**\
        \ layers up to 5 MB that meet Climate\u2019s format requirements are accepted.\
        \ Uploaded layers are not stored by Leaf."
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Layers_API_leafUserId'
      - name: uploadType
        in: query
        description: Type of layer being uploaded.
        required: true
        schema:
          type: string
          enum:
          - RGB
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/tiff
      responses:
        '200':
          description: Upload completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LayerUploadResponse'
              examples:
                sample:
                  value:
                    id: 86fb8bea-1670-48ea-a85d-fbdf6feefb35
                    name: LayerName
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /beta/prescription/api/users/{leafUserId}/ravenSlingshot:
    post:
      summary: Upload prescription to Raven Slingshot
      operationId: uploadRavenSlingshot
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      requestBody:
        $ref: '#/components/requestBodies/ZipFile'
      responses:
        '200':
          description: Upload metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
    get:
      summary: List prescriptions from Raven Slingshot
      operationId: listRavenSlingshot
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      responses:
        '200':
          description: List of prescriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrescriptionList'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
  /beta/prescription/api/users/{leafUserId}/johnDeere:
    post:
      summary: Upload prescription to John Deere
      operationId: uploadJohnDeere
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      - $ref: '#/components/parameters/organizationId'
      requestBody:
        $ref: '#/components/requestBodies/ZipFile'
      responses:
        '200':
          description: Upload metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
    get:
      summary: List prescriptions from John Deere
      operationId: listJohnDeere
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: List of prescriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrescriptionList'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
  /beta/prescription/api/users/{leafUserId}/johnDeere/download:
    get:
      summary: Download prescription from John Deere
      operationId: downloadJohnDeere
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      - $ref: '#/components/parameters/fileId'
      - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Presigned download URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadUrl'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
  /beta/prescription/api/users/{leafUserId}/cnhi:
    post:
      summary: Upload prescription to CNHi
      operationId: uploadCNHi
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      - $ref: '#/components/parameters/companyId'
      requestBody:
        $ref: '#/components/requestBodies/ZipFile'
      responses:
        '200':
          description: Upload metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
    get:
      summary: List prescriptions from CNHi
      operationId: listCNHi
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      - $ref: '#/components/parameters/companyId'
      responses:
        '200':
          description: List of prescriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrescriptionList'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
  /beta/prescription/api/users/{leafUserId}/climateFieldView:
    post:
      summary: Upload prescription to Climate FieldView
      operationId: uploadClimateFieldView
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      requestBody:
        $ref: '#/components/requestBodies/ZipFile'
      responses:
        '200':
          description: Upload metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
  /beta/prescription/api/users/{leafUserId}/trimble:
    post:
      summary: Upload prescription to Trimble
      operationId: uploadTrimble
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      - $ref: '#/components/parameters/rateAttribute'
      - $ref: '#/components/parameters/rateUnit'
      - $ref: '#/components/parameters/fileName'
      requestBody:
        $ref: '#/components/requestBodies/ZipFile'
      responses:
        '200':
          description: Upload metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
  /beta/prescription/api/users/{leafUserId}/agleader:
    post:
      summary: Upload prescription to AgLeader
      operationId: uploadAgLeader
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Beta_Prescriptions_API_leafUserId'
      requestBody:
        $ref: '#/components/requestBodies/ZipFile'
      responses:
        '200':
          description: Upload metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Beta_Prescriptions API
  /prescription/api/users/{leafUserId}/operationsPlanning/JohnDeere:
    post:
      tags:
      - Leaf API_Reference_Beta_Prescriptions_Operations_Planning API
      summary: Create an operation plan on John Deere
      description: "Creates a John Deere Work Plan (operation planning) based on prescriptions\
        \ and optional work\u2010order metadata."
      security:
      - bearerAuth: []
      parameters:
      - name: leafUserId
        in: path
        required: true
        description: Leaf user identifier whose organization the plan will belong
          to.
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperationPlanCreateRequest'
      responses:
        '201':
          description: Operation plan successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationPlan'
        '400':
          description: Invalid request body or parameters.
        '401':
          description: "Authentication failed \u2013 missing or invalid bearer token."
        '404':
          description: Leaf user not found.
  /prescription/api/users/{leafUserId}/operationsPlanning:
    get:
      tags:
      - Leaf API_Reference_Beta_Prescriptions_Operations_Planning API
      summary: List all operation plans
      description: Returns every operation plan that exists for the specified Leaf
        user.
      security:
      - bearerAuth: []
      parameters:
      - name: leafUserId
        in: path
        required: true
        description: Leaf user identifier whose operation plans will be listed.
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: A JSON array of operation plans.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperationPlan'
        '401':
          description: "Authentication failed \u2013 missing or invalid bearer token."
        '404':
          description: Leaf user not found.
  /config/api/configs:
    get:
      tags:
      - Leaf API_Reference_Configurations API
      summary: Get API Owner's Configuration
      operationId: getApiOwnerConfiguration
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Current configuration for the API owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
    patch:
      tags:
      - Leaf API_Reference_Configurations API
      summary: Update API Owner's Configuration
      operationId: updateApiOwnerConfiguration
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationMutation'
      responses:
        '200':
          description: Updated configuration for the API owner.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
  /config/api/configs/{leafUserId}:
    parameters:
    - name: leafUserId
      in: path
      required: true
      description: UUID identifying the Leaf user.
      schema:
        type: string
        format: uuid
    get:
      tags:
      - Leaf API_Reference_Configurations API
      summary: Get Leaf User's Configuration
      operationId: getLeafUserConfiguration
      security:
      - BearerAuth: []
      responses:
        '200':
          description: Current configuration for the specified Leaf user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
    post:
      tags:
      - Leaf API_Reference_Configurations API
      summary: Create Leaf User's Configuration
      operationId: createLeafUserConfiguration
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationMutation'
      responses:
        '201':
          description: Newly created configuration for the Leaf user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
    patch:
      tags:
      - Leaf API_Reference_Configurations API
      summary: Update Leaf User's Configuration
      operationId: updateLeafUserConfiguration
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationMutation'
      responses:
        '200':
          description: Updated configuration for the Leaf user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
    delete:
      tags:
      - Leaf API_Reference_Configurations API
      summary: Delete Leaf User's Configuration
      operationId: deleteLeafUserConfiguration
      security:
      - BearerAuth: []
      responses:
        '204':
          description: Configuration deleted. The Leaf user will now inherit the API
            owner's configuration.
  /satellite/api/fields:
    get:
      summary: Get all satellite fields
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      parameters:
      - name: externalId
        in: query
        schema:
          type: string
      - name: sort
        in: query
        description: Comma-separated list of fields with optional asc|desc (e.g. createdAt,desc).
        schema:
          type: string
      responses:
        '200':
          description: List of satellite fields
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
    post:
      summary: Create a satellite field
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldCreateRequest'
      responses:
        '201':
          description: Field created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
  /satellite/api/fields/{fieldId}:
    parameters:
    - name: fieldId
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get a satellite field
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      responses:
        '200':
          description: Satellite field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
    delete:
      summary: Delete a satellite field
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      responses:
        '204':
          description: Field deleted
  /satellite/api/fields/{fieldId}/processes:
    parameters:
    - name: fieldId
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get processes (imagery) for a field
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      parameters:
      - name: startDate
        in: query
        schema:
          type: string
          format: date
      - name: endDate
        in: query
        schema:
          type: string
          format: date
      - name: startProcessedTimestamp
        in: query
        schema:
          type: string
          format: date-time
      - name: endProcessedTimestamp
        in: query
        schema:
          type: string
          format: date-time
      - name: maxClouds
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 100
      - name: minCoverage
        in: query
        schema:
          type: number
          minimum: 0
          maximum: 100
          default: 0
      - name: status
        in: query
        schema:
          type: string
          enum:
          - SUCCESS
          - FAILED
          - STARTED
          default: SUCCESS
      - name: page
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          default: 20
      - name: provider
        in: query
        description: Filter by provider. Use multiple occurrences to specify more
          than one.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - sentinel
            - planet
      responses:
        '200':
          description: List of processes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Process'
  /satellite/api/fields/{fieldId}/processes/{processId}:
    parameters:
    - name: fieldId
      in: path
      required: true
      schema:
        type: string
    - name: processId
      in: path
      required: true
      schema:
        type: integer
    get:
      summary: Get a specific process
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      responses:
        '200':
          description: Process detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
  /satellite/api/fields/{fieldId}/process/{processId}/reprocess:
    parameters:
    - name: fieldId
      in: path
      required: true
      schema:
        type: string
    - name: processId
      in: path
      required: true
      schema:
        type: integer
    post:
      summary: Reprocess satellite images for a process
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      responses:
        '202':
          description: Reprocessing accepted
  /satellite/api/fields/{fieldId}/subscription:
    parameters:
    - name: fieldId
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get Planet subscription details for a field
      tags:
      - Leaf API_Reference_Crop_Monitoring API
      responses:
        '200':
          description: Subscription information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
  /fields/api/fields:
    get:
      summary: Get all fields
      description: Returns a paginated list of fields. Filters can be applied via
        query parameters.
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: type
        schema:
          type: string
      - in: query
        name: farmId
        schema:
          type: integer
      - in: query
        name: provider
        schema:
          type: string
      - in: query
        name: leafUserId
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 0
      - in: query
        name: size
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      responses:
        '200':
          description: Paged list of fields
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Field'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields:
    post:
      summary: Create a field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldCreate'
      responses:
        '201':
          description: Created field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Field'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/{fieldId}:
    get:
      summary: Get a field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      responses:
        '200':
          description: Field resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Field'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
    patch:
      summary: Update a field
      description: Only manually created fields can be updated.
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldUpdate'
      responses:
        '200':
          description: Updated field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Field'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
    delete:
      summary: Delete a field
      description: Provider-created fields cannot be deleted by Leaf.
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      responses:
        '204':
          description: Field deleted
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/{fieldId}/operations/files:
    get:
      summary: Get all operation files of a field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      - in: query
        name: operationType
        schema:
          type: string
          enum:
          - harvested
          - planted
          - applied
          - other
      - in: query
        name: provider
        schema:
          type: string
      - in: query
        name: origin
        schema:
          type: string
          enum:
          - provider
          - automerged
          - merged
          - uploaded
      - in: query
        name: crop
        schema:
          type: string
      - in: query
        name: startTime
        schema:
          type: string
          format: date-time
      - in: query
        name: endTime
        schema:
          type: string
          format: date-time
      - in: query
        name: page
        schema:
          type: integer
          minimum: 0
      - in: query
        name: size
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      responses:
        '200':
          description: List of operation files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OperationFile'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/{fieldId}/operations/files/{fileId}:
    get:
      summary: Get an operation file of a field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      - $ref: '#/components/parameters/FileId'
      responses:
        '200':
          description: Operation file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationFile'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/intersects:
    post:
      summary: Get fields by geometry intersection
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - geometry
              properties:
                geometry:
                  $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Geometry'
                intersectionThreshold:
                  type: number
                  minimum: 0.01
                  maximum: 100
                  default: 0.01
      responses:
        '200':
          description: List of intersecting fields
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Field'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/intersect:
    post:
      summary: Get intersection of fields
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: uuid
      responses:
        '200':
          description: Geometry representing intersection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Geometry'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/sync:
    post:
      summary: Trigger manual field synchronization
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      responses:
        '202':
          description: Sync scheduled
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/{fieldId}/enableSync:
    post:
      summary: Enable a preview field for synchronization
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      responses:
        '202':
          description: Field marked for synchronization
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leaf_user_id}/fields/{field_id}/integration/{provider_name}:
    post:
      summary: Upload field boundary to provider
      security:
      - bearerAuth: []
      parameters:
      - name: leaf_user_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: field_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: provider_name
        in: path
        required: true
        schema:
          type: string
          enum:
          - JohnDeere
          - ClimateFieldView
      - $ref: '#/components/parameters/OrganizationIdQuery'
      responses:
        '202':
          description: Upload scheduled
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/{fieldId}/boundaries:
    get:
      summary: Get all boundaries from field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      responses:
        '200':
          description: List of boundaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Boundary'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}:
    get:
      summary: Get a boundary from field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      - $ref: '#/components/parameters/BoundaryId'
      responses:
        '200':
          description: Boundary resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boundary'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/fields/{fieldId}/boundary:
    get:
      summary: Get active boundary from field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      responses:
        '200':
          description: Active boundary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boundary'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
    put:
      summary: Update active boundary from field
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FieldId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoundaryUpdate'
      responses:
        '200':
          description: New active boundary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Boundary'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/farms:
    get:
      summary: Get all farms
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: growerId
        schema:
          type: integer
      - in: query
        name: provider
        schema:
          type: string
      - in: query
        name: leafUserId
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 0
      - in: query
        name: size
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      responses:
        '200':
          description: List of farms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Farm'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/farms:
    post:
      summary: Create a farm
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmCreate'
      responses:
        '201':
          description: Created farm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/farms/{id}:
    get:
      summary: Get a farm
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FarmId'
      responses:
        '200':
          description: Farm resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
    put:
      summary: Update a farm
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/FarmId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FarmCreate'
      responses:
        '200':
          description: Updated farm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Farm'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/growers:
    get:
      summary: Get all growers
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: provider
        schema:
          type: string
      - in: query
        name: leafUserId
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 0
      - in: query
        name: size
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      responses:
        '200':
          description: List of growers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Grower'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/growers:
    post:
      summary: Create a grower
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrowerCreate'
      responses:
        '201':
          description: Created grower
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grower'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/users/{leafUserId}/growers/{id}:
    get:
      summary: Get a grower
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/GrowerId'
      responses:
        '200':
          description: Grower resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grower'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
    put:
      summary: Update a grower
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/GrowerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrowerCreate'
      responses:
        '200':
          description: Updated grower
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grower'
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /fields/api/growers/enableSync:
    post:
      summary: Enable preview fields by grower
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - growerIds
              properties:
                growerIds:
                  type: array
                  items:
                    type: integer
      responses:
        '202':
          description: Growers scheduled for field synchronization
      tags:
      - Leaf API_Reference_Field_Boundary_Management API
  /uploadservice/api/upload:
    post:
      tags:
      - Leaf API_Reference_Field_Boundary_Management_Upload_fields API
      summary: Upload a field file
      description: "Creates Leaf field boundaries from a zip archive containing shapefile,\
        \ GeoJSON, or KML/KMZ data.\n\u2022 Max file size: 3 GB  \n\u2022 Max 100\
        \ fields per upload  \nAll geometries are re-projected to EPSG:4326.  \nIf\
        \ the uploaded data contains a property named **name**, it is used as the\
        \ Leaf field name.\n"
      operationId: uploadFieldFile
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: leafUserId
        description: Leaf user ID that will own the created fields.
        required: true
        schema:
          type: string
          format: uuid
      - in: query
        name: farmId
        description: Optional existing Leaf farm ID; created fields will be placed
          under this farm.
        required: false
        schema:
          type: string
          format: uuid
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Zip archive containing the spatial files to be processed.
              required:
              - file
      responses:
        '201':
          description: Upload successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
        '400':
          description: Invalid request parameters or file.
    get:
      tags:
      - Leaf API_Reference_Field_Boundary_Management_Upload_fields API
      summary: Get all uploads
      operationId: listUploads
      security:
      - bearerAuth: []
      responses:
        '200':
          description: A list of all uploads belonging to the authenticated user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Upload'
        '401':
          description: Unauthorized
  /uploadservice/api/upload/{uploadId}:
    get:
      tags:
      - Leaf API_Reference_Field_Boundary_Management_Upload_fields API
      summary: Get an upload
      operationId: getUpload
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: uploadId
        required: true
        schema:
          type: string
          format: uuid
        description: Identifier returned by the upload creation request.
      responses:
        '200':
          description: Detailed information about a single upload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
        '404':
          description: Upload not found
  /uploadservice/api/upload/{uploadId}/entries:
    get:
      tags:
      - Leaf API_Reference_Field_Boundary_Management_Upload_fields API
      summary: Get the upload entries
      operationId: listUploadEntries
      security:
      - bearerAuth: []
      parameters:
      - in: path
        name: uploadId
        required: true
        schema:
          type: string
          format: uuid
        description: Identifier returned by the upload creation request.
      responses:
        '200':
          description: Processing results for each compatible file detected in the
            upload.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entry'
        '404':
          description: Upload not found
  /operations/api/operations:
    get:
      summary: Get all operations
      description: Returns a paginated list of operations that belong to the authenticated
        API owner.
      operationId: listOperations
      parameters:
      - in: query
        name: leafUserId
        schema:
          type: string
          format: uuid
      - in: query
        name: provider
        schema:
          type: string
          enum:
          - CNHI
          - JohnDeere
          - Trimble
          - ClimateFieldView
          - AgLeader
          - Stara
          - Leaf
      - in: query
        name: startTime
        description: Return operations whose startTime is **after or equal** to this
          value.
        schema:
          type: string
          format: date-time
      - in: query
        name: updatedTime
        description: Return operations whose updatedTime is **after or equal** to
          this value.
        schema:
          type: string
          format: date-time
      - in: query
        name: endTime
        description: Return operations whose endTime is **before or equal** to this
          value.
        schema:
          type: string
          format: date-time
      - in: query
        name: operationType
        schema:
          type: string
          enum:
          - applied
          - planted
          - harvested
          - tillage
      - in: query
        name: fieldId
        schema:
          type: string
          format: uuid
      - in: query
        name: page
        schema:
          type: integer
          minimum: 0
          default: 0
      - in: query
        name: size
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
      - in: query
        name: sort
        description: "Comma-separated list of fields to sort by.  \nA field can be\
          \ followed by `asc` or `desc` (default `asc`).  \nAllowed fields: id, leafUserId,\
          \ startTime, endTime, type, updatedTime.\n"
        schema:
          type: string
      responses:
        '200':
          description: Paged array of operations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Operation'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}:
    get:
      summary: Get an operation
      operationId: getOperation
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/summary:
    get:
      summary: Get operation summary
      operationId: getOperationSummary
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: Summary GeoJSON feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationSummary'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/standardGeojson:
    get:
      summary: Get standardGeoJSON links
      operationId: getStandardGeojson
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: URLs to the standard GeoJSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardGeojsonLinks'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/standardGeoparquet:
    get:
      summary: Get standard GeoParquet link
      operationId: getStandardGeoparquet
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: URL to the standard GeoParquet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardGeoparquetLinks'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/filteredGeojson:
    get:
      summary: Get filteredGeoJSON links
      operationId: getFilteredGeojson
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: URLs to the filtered GeoJSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredGeojsonLinks'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/filteredGeoparquet:
    get:
      summary: Get filtered GeoParquet link
      operationId: getFilteredGeoparquet
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: URL to the filtered GeoParquet
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilteredGeoparquetLinks'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/images:
    get:
      summary: Get PNG images (legacy)
      operationId: getImages
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: List of PNG images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagesItem'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/imagesV2:
    get:
      summary: Get PNG images V2
      operationId: getImagesV2
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: List of improved PNG images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ImagesV2Item'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/geotiffImages:
    get:
      summary: Get GeoTIFF images
      operationId: getGeotiffImages
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: List of GeoTIFF images
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GeotiffImageItem'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/units:
    get:
      summary: Get operation units
      operationId: getUnits
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: "Map of property \u2192 unit"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitsResponse'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/machines:
    get:
      summary: Get machines used in the operation
      operationId: getMachines_Leaf_API_Reference_Field_Operations_API_1
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: IDs of machines
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachinesResponse'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/implements:
    get:
      summary: Get implements used in the operation
      operationId: getImplements_Leaf_API_Reference_Field_Operations_API_1
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: IDs of implements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImplementsResponse'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/operators:
    get:
      summary: Get operators involved in the operation
      operationId: getOperators_Leaf_API_Reference_Field_Operations_API_1
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: IDs of operators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatorsResponse'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/sessions:
    get:
      summary: Get operation sessions
      operationId: getSessions
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: List of session groups by machine
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SessionGroup'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/cropOperationByField:
    post:
      summary: Crop operation by field
      operationId: cropOperationByField
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              properties:
                id:
                  description: Operation ID to be cropped
                  type: string
                  format: uuid
      responses:
        '202':
          description: Crop job accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CropResponse'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/reprocess:
    post:
      summary: Reprocess an operation
      operationId: reprocessOperation
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '202':
          description: Reprocess job accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReprocessResponse'
      tags:
      - Leaf API_Reference_Field_Operations API
  /operations/api/operations/{id}/files:
    get:
      summary: Get files from an operation
      operationId: getFiles
      parameters:
      - $ref: '#/components/parameters/operationId'
      responses:
        '200':
          description: List of original files that compose the field operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
      tags:
      - Leaf API_Reference_Field_Operations API
  /irrigation/api/users/{leafUserId}/irrigation-equipment:
    get:
      summary: Get all irrigation equipment
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Irrigation_API_leafUserId'
      - $ref: '#/components/parameters/providerEquipmentId'
      - $ref: '#/components/parameters/provider'
      responses:
        '200':
          description: List of irrigation equipment
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IrrigationEquipment'
        '401':
          $ref: '#/components/responses/Leaf_API_Reference_Irrigation_API_UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Irrigation API
  /irrigation/api/users/{leafUserId}/irrigation-equipment/{id}:
    get:
      summary: Get an irrigation equipment by ID
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Irrigation_API_leafUserId'
      - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Irrigation equipment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IrrigationEquipment'
        '401':
          $ref: '#/components/responses/Leaf_API_Reference_Irrigation_API_UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Irrigation API
  /irrigation/api/users/{leafUserId}/irrigation/applied-irrigation:
    get:
      summary: Get as-applied irrigation activities
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Irrigation_API_leafUserId'
      - $ref: '#/components/parameters/provider'
      - $ref: '#/components/parameters/startTime'
      - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          description: List of irrigation activities summarised by day
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppliedIrrigation'
        '401':
          $ref: '#/components/responses/Leaf_API_Reference_Irrigation_API_UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Irrigation API
  /irrigation/api/users/{leafUserId}/irrigation/applied-irrigation/{id}:
    get:
      summary: Get an irrigation activity by ID
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Irrigation_API_leafUserId'
      - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Irrigation activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedIrrigation'
        '401':
          $ref: '#/components/responses/Leaf_API_Reference_Irrigation_API_UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Irrigation API
  /irrigation/api/users/{leafUserId}/irrigation/fields:
    get:
      summary: Get all irrigated fields
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Irrigation_API_leafUserId'
      - $ref: '#/components/parameters/equipmentId'
      - $ref: '#/components/parameters/startTime'
      - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          description: List of fields that received irrigation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldListItem'
        '401':
          $ref: '#/components/responses/Leaf_API_Reference_Irrigation_API_UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Irrigation API
  /irrigation/api/users/{leafUserId}/irrigation/fields/{fieldId}:
    get:
      summary: Get irrigation information for a specific field
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Irrigation_API_leafUserId'
      - $ref: '#/components/parameters/fieldId'
      - $ref: '#/components/parameters/irrigationId'
      - $ref: '#/components/parameters/provider'
      - $ref: '#/components/parameters/startTime'
      - $ref: '#/components/parameters/endTime'
      responses:
        '200':
          description: Irrigation activities for the field
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FieldIrrigationRecord'
        '401':
          $ref: '#/components/responses/Leaf_API_Reference_Irrigation_API_UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Irrigation API
  /irrigation/api/users/{leafUserId}/irrigation/fields/{fieldId}/irrigated/{id}:
    get:
      summary: Get a field irrigation activity by ID
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Irrigation_API_leafUserId'
      - $ref: '#/components/parameters/fieldId'
      - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: Field irrigation activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FieldIrrigationRecord'
        '401':
          $ref: '#/components/responses/Leaf_API_Reference_Irrigation_API_UnauthorizedError'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Irrigation API
  /usermanagement/api/api-owners/sharing-relation/{relationRole}:
    get:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: List API Owner sharing relations
      description: Returns all sharing relations where the caller acts as **relationRole**
        (`SENDER` or `RECEIVER`).
      parameters:
      - $ref: '#/components/parameters/RelationRole'
      responses:
        '200':
          description: Array with the existing relations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SharingRelation'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/{relationRole}/{targetApiOwner}/status:
    get:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Get sharing relation status
      parameters:
      - $ref: '#/components/parameters/RelationRole'
      - $ref: '#/components/parameters/TargetApiOwner'
      responses:
        '200':
          description: Current status for the relation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationStatus'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/receiver:
    post:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Create a sharing relation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - receiverApiOwner
              properties:
                receiverApiOwner:
                  type: string
                  description: The API Owner that will receive shared data.
      responses:
        '201':
          description: Relation created with status `PENDING`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingRelation'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/{relationRole}/{targetApiOwner}:
    patch:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Update sharing relation status
      description: "Change a relation\u2019s status to `ALLOWED` or `BLOCKED`."
      parameters:
      - $ref: '#/components/parameters/RelationRole'
      - $ref: '#/components/parameters/TargetApiOwner'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
              - status
              properties:
                status:
                  $ref: '#/components/schemas/RelationStatus'
      responses:
        '200':
          description: Updated relation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharingRelation'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/{relationRole}/{targetApiOwner}/invalidate-tokens:
    post:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Invalidate receiver tokens
      description: Immediately invalidates all tokens previously issued to the receiver.
      parameters:
      - $ref: '#/components/parameters/RelationRole'
      - $ref: '#/components/parameters/TargetApiOwner'
      responses:
        '204':
          description: Tokens invalidated.
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/{relationRole}/{targetApiOwner}/users-permissions/{leafUserId}:
    get:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Get Leaf user permissions
      parameters:
      - $ref: '#/components/parameters/RelationRole'
      - $ref: '#/components/parameters/TargetApiOwner'
      - $ref: '#/components/parameters/LeafUserId'
      responses:
        '200':
          description: Permission object for the Leaf user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeafUserPermissions'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/receiver/{receiverApiOwner}/users-permissions/{leafUserId}:
    post:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Create Leaf user permissions
      parameters:
      - $ref: '#/components/parameters/ReceiverApiOwner'
      - $ref: '#/components/parameters/LeafUserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LeafUserPermissionsRequest'
      responses:
        '201':
          description: Permissions granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeafUserPermissions'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/receiver/{receiverApiOwner}/users-permissions/{leafUserId}/{resource}:
    patch:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Update permissions for a specific resource
      parameters:
      - $ref: '#/components/parameters/ReceiverApiOwner'
      - $ref: '#/components/parameters/LeafUserId'
      - $ref: '#/components/parameters/Resource'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePermission'
      responses:
        '200':
          description: Updated permissions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeafUserPermissions'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-owners/sharing-relation/{relationRole}/{receiverApiOwner}/users-permissions/{leafUserId}:
    delete:
      tags:
      - Leaf API_Reference_Leaf_Connect API
      summary: Delete Leaf user permissions
      parameters:
      - $ref: '#/components/parameters/RelationRole'
      - $ref: '#/components/parameters/ReceiverApiOwner'
      - $ref: '#/components/parameters/LeafUserId'
      responses:
        '204':
          description: Permission deleted.
        default:
          $ref: '#/components/responses/UnexpectedError'
  /usermanagement/api/api-keys:
    get:
      summary: Get all Leaf user API keys
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/LeafUserIdQuery'
      responses:
        '200':
          description: List of API keys for the specified Leaf user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKey'
      tags:
      - Leaf API_Reference_Leaf_Link API
    post:
      summary: Create a Leaf user API key
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreateRequest'
      responses:
        '201':
          description: Newly created API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyCreateResponse'
      tags:
      - Leaf API_Reference_Leaf_Link API
  /usermanagement/api/api-keys/{apiKeyId}:
    delete:
      summary: Revoke a Leaf user API key
      security:
      - bearerAuth: []
      parameters:
      - name: apiKeyId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: API key successfully revoked.
      tags:
      - Leaf API_Reference_Leaf_Link API
  /usermanagement/api/app-keys/{provider}:
    get:
      summary: Get all application information for a provider
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      responses:
        '200':
          description: Provider application list.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppKeySummary'
      tags:
      - Leaf API_Reference_Leaf_Link API
  /usermanagement/api/app-keys/{provider}/{appName}:
    get:
      summary: Get application information
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      responses:
        '200':
          description: Application information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppKeySummary'
      tags:
      - Leaf API_Reference_Leaf_Link API
    post:
      summary: Create application information
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericAppKeyRequest'
      responses:
        '201':
          description: Application information created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppKeySummary'
      tags:
      - Leaf API_Reference_Leaf_Link API
    put:
      summary: Update application information
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericAppKeyRequest'
      responses:
        '200':
          description: Application information updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppKeySummary'
      tags:
      - Leaf API_Reference_Leaf_Link API
    delete:
      summary: Delete application information
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      responses:
        '204':
          description: Application information deleted
      tags:
      - Leaf API_Reference_Leaf_Link API
  /usermanagement/api/app-keys/{provider}/{appName}/{clientEnvironment}:
    get:
      summary: Get application information (environment specific)
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      - $ref: '#/components/parameters/ClientEnvParam'
      responses:
        '200':
          description: Application information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppKeySummary'
      tags:
      - Leaf API_Reference_Leaf_Link API
    post:
      summary: Create application information (environment specific)
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      - $ref: '#/components/parameters/ClientEnvParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericAppKeyRequest'
      responses:
        '201':
          description: Application information created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppKeySummary'
      tags:
      - Leaf API_Reference_Leaf_Link API
    put:
      summary: Update application information (environment specific)
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      - $ref: '#/components/parameters/ClientEnvParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericAppKeyRequest'
      responses:
        '200':
          description: Application information updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppKeySummary'
      tags:
      - Leaf API_Reference_Leaf_Link API
    delete:
      summary: Delete application information (environment specific)
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/ProviderParam'
      - $ref: '#/components/parameters/AppNameParam'
      - $ref: '#/components/parameters/ClientEnvParam'
      responses:
        '204':
          description: Application information deleted
      tags:
      - Leaf API_Reference_Leaf_Link API
  /usermanagement/api/users:
    get:
      tags:
      - Leaf API_Reference_Leaf_User API
      summary: Get all Leaf Users
      description: 'Returns a paged list of Leaf Users belonging to the authenticated
        API owner. Results can be filtered by email, name, or externalId.

        '
      security:
      - bearerAuth: []
      parameters:
      - name: email
        in: query
        schema:
          type: string
          format: email
        description: Filter by user e-mail.
      - name: name
        in: query
        schema:
          type: string
        description: Filter by user name.
      - name: externalId
        in: query
        schema:
          type: string
        description: Filter by external identifier.
      - name: page
        in: query
        schema:
          type: integer
          minimum: 0
          default: 0
        description: Page number (zero-based).
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        description: Page size (max 100).
      responses:
        '200':
          description: Array of Leaf Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - Leaf API_Reference_Leaf_User API
      summary: Create a Leaf User
      description: 'Creates a new Leaf User. Optionally links provider credentials
        by supplying their IDs.

        '
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Newly created Leaf User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - Leaf API_Reference_Leaf_User API
      summary: Update a Leaf User
      description: 'Replaces an existing Leaf User with the supplied payload. To keep
        provider credentials, include them in the request body; omitting them will
        remove the association.

        '
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated Leaf User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /usermanagement/api/users/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: UUID of the Leaf User.
      schema:
        type: string
        format: uuid
    get:
      tags:
      - Leaf API_Reference_Leaf_User API
      summary: Get a Leaf User
      description: Retrieve details for a single Leaf User by ID.
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Leaf User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      tags:
      - Leaf API_Reference_Leaf_User API
      summary: Delete a Leaf User
      description: Permanently removes a Leaf User by ID.
      security:
      - bearerAuth: []
      responses:
        '204':
          description: User deleted successfully
  /operations/api/files:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get all files
      description: "Returns a paginated list of machine files that belong to the authenticated\
        \ account.  \nAll filter parameters are optional unless stated otherwise.\n"
      parameters:
      - name: leafUserId
        in: query
        description: Filter by the UUID of a Leaf User that owns the files
        schema:
          type: string
          format: uuid
      - name: provider
        in: query
        description: Filter by provider
        schema:
          $ref: '#/components/schemas/Provider'
      - name: status
        in: query
        schema:
          type: string
          enum:
          - processed
          - failed
          - processing
      - name: origin
        in: query
        schema:
          type: string
          enum:
          - provider
          - automerged
          - merged
          - uploaded
      - name: organizationId
        in: query
        description: Provider organization identifier (John Deere only)
        schema:
          type: string
      - name: batchId
        in: query
        description: UUID of an upload batch
        schema:
          type: string
          format: uuid
      - name: createdTime
        in: query
        description: Returns files created after this timestamp
        schema:
          type: string
          format: date-time
      - name: startTime
        in: query
        description: Returns files whose startTime is after this timestamp
        schema:
          type: string
          format: date-time
      - name: updatedTime
        in: query
        description: Returns files updated after this timestamp
        schema:
          type: string
          format: date-time
      - name: endTime
        in: query
        description: Returns files whose endTime is before this timestamp
        schema:
          type: string
          format: date-time
      - name: operationType
        in: query
        schema:
          $ref: '#/components/schemas/OperationType'
      - name: minArea
        in: query
        description: "Minimum area (m\xB2) of operations to return"
        schema:
          type: number
          format: double
      - name: page
        in: query
        description: Zero-based page index (default 0)
        schema:
          type: integer
          minimum: 0
      - name: size
        in: query
        description: Page size (max 100, default 20)
        schema:
          type: integer
          minimum: 1
          maximum: 100
      - name: sort
        in: query
        description: "Sorting criteria, e.g. `id,desc`.  \nMultiple criteria can be\
          \ supplied separated by commas.\n"
        schema:
          type: string
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: object
                properties:
                  operations:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
  /operations/api/files/{id}:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get a file
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Machine_File_Conversion_API_FileId'
      responses:
        '200':
          description: Machine file resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
  /operations/api/files/{id}/summary:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get a file summary
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Machine_File_Conversion_API_FileId'
      responses:
        '200':
          description: Summary of the operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileSummary'
  /operations/api/files/{id}/images:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get a file's images
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Machine_File_Conversion_API_FileId'
      responses:
        '200':
          description: List of rendered PNG layers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
  /operations/api/files/{id}/units:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get a file's units
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Machine_File_Conversion_API_FileId'
      responses:
        '200':
          description: "Map of numerical property \u2192 unit of measurement"
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /operations/api/files/{id}/status:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get a file status
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Machine_File_Conversion_API_FileId'
      responses:
        '200':
          description: Conversion pipeline status for each processing step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileStatus'
  /operations/api/files/{id}/outsideFieldGeojson:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get a file's outside-field GeoJSON
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Machine_File_Conversion_API_FileId'
      responses:
        '200':
          description: Metadata and download URL for outside-field GeoJSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutsideFieldGeojson'
  /operations/api/files/outsideFieldGeojson:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get all outside-field GeoJSON files
      responses:
        '200':
          description: List of outside-field GeoJSON resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutsideFieldGeojson'
  /operations/api/files/uncoveredFiles:
    get:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Get uncovered files
      description: Returns files that did not intersect any field and therefore generated
        no Field Operations.
      parameters:
      - name: leafUserId
        in: query
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          description: List of uncovered file IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  files:
                    type: array
                    items:
                      type: string
                      format: uuid
  /operations/api/files/merge:
    post:
      tags:
      - Leaf API_Reference_Machine_File_Conversion API
      summary: Merge files
      description: "Creates a new file that merges the supplied processed files. \
        \ \nThe call returns immediately; monitor the resulting file's `status` until\
        \ it reaches **processed**.\n"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeRequest'
      responses:
        '200':
          description: Merge operation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MergeResponse'
  /widgets/api/magic-link/provider:
    get:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Get all provider Magic Links
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of provider Magic Links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderMagicLink'
    post:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Create provider Magic Link with Leaf user creation
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderMagicLinkRequestWithUser'
      responses:
        '201':
          description: Magic Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCreationResponse'
  /widgets/api/magic-link/provider/{magicLinkId}:
    parameters:
    - in: path
      name: magicLinkId
      required: true
      schema:
        type: string
    get:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Get a provider Magic Link
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Provider Magic Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderMagicLink'
    delete:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Delete a provider Magic Link
      security:
      - bearerAuth: []
      responses:
        '204':
          description: Deleted successfully
  /widgets/api/magic-link/users/{leafUserId}/provider:
    parameters:
    - in: path
      name: leafUserId
      required: true
      schema:
        type: string
    post:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Create provider Magic Link for existing Leaf user
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProviderMagicLinkRequest'
      responses:
        '201':
          description: Magic Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCreationResponse'
  /widgets/api/magic-link/authentication:
    get:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Get all authentication Magic Links
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of authentication Magic Links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthenticationMagicLink'
    post:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Create authentication Magic Link with Leaf user creation
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthenticationMagicLinkRequestWithUser'
      responses:
        '201':
          description: Magic Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCreationResponse'
  /widgets/api/magic-link/authentication/{magicLinkId}:
    parameters:
    - in: path
      name: magicLinkId
      required: true
      schema:
        type: string
    get:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Get an authentication Magic Link
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Authentication Magic Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationMagicLink'
    delete:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Delete an authentication Magic Link
      security:
      - bearerAuth: []
      responses:
        '204':
          description: Deleted successfully
  /widgets/api/magic-link/users/{leafUserId}/authentication:
    parameters:
    - in: path
      name: leafUserId
      required: true
      schema:
        type: string
    post:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Create authentication Magic Link for existing Leaf user
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAuthenticationMagicLinkRequest'
      responses:
        '201':
          description: Magic Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCreationResponse'
  /widgets/api/magic-link/file-upload:
    get:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Get all file-upload Magic Links
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of file-upload Magic Links
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileUploadMagicLink'
    post:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Create file-upload Magic Link with Leaf user creation
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileUploadMagicLinkRequestWithUser'
      responses:
        '201':
          description: Magic Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCreationResponse'
  /widgets/api/magic-link/file-upload/{magicLinkId}:
    parameters:
    - in: path
      name: magicLinkId
      required: true
      schema:
        type: string
    get:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Get a file-upload Magic Link
      security:
      - bearerAuth: []
      responses:
        '200':
          description: File-upload Magic Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadMagicLink'
    delete:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Delete a file-upload Magic Link
      security:
      - bearerAuth: []
      responses:
        '204':
          description: Deleted successfully
  /widgets/api/magic-link/users/{leafUserId}/file-upload:
    parameters:
    - in: path
      name: leafUserId
      required: true
      schema:
        type: string
    post:
      tags:
      - Leaf API_Reference_Magic_Link API
      summary: Create file-upload Magic Link for existing Leaf user
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFileUploadMagicLinkRequest'
      responses:
        '201':
          description: Magic Link created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicLinkCreationResponse'
  /operations/api/batch:
    post:
      tags:
      - Leaf API_Reference_Manual_File_Upload API
      summary: Upload a ZIP file for conversion.
      description: "Accepts multipart/form-data with a single file field named **file**\
        \ containing a ZIP archive (max 3 GB).  \nThe request must include **leafUserId**\
        \ and **provider** query parameters.\n"
      operationId: uploadBatch
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Manual_File_Upload_API_LeafUserIdQuery'
      - $ref: '#/components/parameters/ProviderQuery'
      responses:
        '201':
          description: Batch created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
    get:
      tags:
      - Leaf API_Reference_Manual_File_Upload API
      summary: List all batches.
      operationId: listBatches
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Array of batches.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Batch'
  /operations/api/batch/{id}:
    get:
      tags:
      - Leaf API_Reference_Manual_File_Upload API
      summary: Retrieve a single batch by ID.
      operationId: getBatch
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/BatchIdPath'
      responses:
        '200':
          description: Batch details including generated file IDs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
  /operations/api/batch/{id}/retry:
    put:
      tags:
      - Leaf API_Reference_Manual_File_Upload API
      summary: Retry processing a batch.
      operationId: retryBatch
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/BatchIdPath'
      responses:
        '202':
          description: Batch re-queued for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
  /operations/api/batch/{id}/status:
    get:
      tags:
      - Leaf API_Reference_Manual_File_Upload API
      summary: Get per-file status for a batch.
      operationId: batchFilesStatus
      security:
      - bearerAuth: []
      parameters:
      - $ref: '#/components/parameters/BatchIdPath'
      responses:
        '200':
          description: Status summary grouped by category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchStatusSummary'
  /usermanagement/api/users/{leafUserId}/ag-leader-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get AgLeader credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: AgLeader credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgLeaderCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create AgLeader credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgLeaderCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete AgLeader credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/ag-leader-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: AgLeader credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/agvance-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Agvance credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Agvance credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgvanceCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Agvance credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgvanceCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Agvance credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/agvance-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Agvance credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/climate-field-view-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Climate FieldView credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Climate FieldView credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClimateFieldViewCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Climate FieldView credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClimateFieldViewCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Climate FieldView credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/climate-field-view-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Climate FieldView credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/cnhi-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get CNHI credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: CNHI credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CnhCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create CNHI credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CnhCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete CNHI credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/cnhi-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: CNHI credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/john-deere-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get John Deere credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: John Deere credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JohnDeereCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create John Deere credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JohnDeereCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete John Deere credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/john-deere-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: John Deere credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/lindsay-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Lindsay credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Lindsay credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LindsayCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Lindsay credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LindsayCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Lindsay credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/lindsay-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Lindsay credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/raven-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Raven credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Raven credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RavenCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Raven credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RavenCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Raven credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/raven-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Raven credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/raven-slingshot-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Raven Slingshot credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Raven Slingshot credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RavenSlingshotCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Raven Slingshot credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RavenSlingshotCredential'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Raven Slingshot credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/raven-slingshot-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Raven Slingshot credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/sentera-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Sentera credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Sentera credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SenteraCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Sentera credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SenteraCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Sentera credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/sentera-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Sentera credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/stara-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Stara credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Stara credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StaraCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Stara credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StaraCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Stara credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/stara-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Stara credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/trimble-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Trimble credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Trimble credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrimbleCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Trimble credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrimbleCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Trimble credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/trimble-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Trimble credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/valley-credentials:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Get Valley credentials
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Valley credential
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValleyCredential'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Create Valley credentials
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValleyCredentialRequest'
      responses:
        '201':
          $ref: '#/components/responses/CredentialCreated'
    delete:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Delete Valley credentials
      security:
      - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/Deleted'
  /usermanagement/api/users/{leafUserId}/valley-credentials/events:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Valley credential events
      security:
      - bearerAuth: []
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventLog'
  /usermanagement/api/users/{leafUserId}/organizations/{provider}:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_Provider'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Connected and not-connected organizations
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Organizations grouped by connection
          content:
            application/json:
              schema:
                type: object
                properties:
                  connectedOrganizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderOrganization'
                  notConnectedOrganizations:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderOrganization'
  /usermanagement/api/users/{leafUserId}/{provider}/organizations:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_Provider'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: All provider organizations
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: page
        schema:
          type: integer
          default: 0
      - in: query
        name: size
        schema:
          type: integer
          default: 20
          maximum: 100
      responses:
        '200':
          description: Organization list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderOrganization'
  /usermanagement/api/users/{leafUserId}/{provider}/organizations/{providerOrgId}:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_Provider'
    - $ref: '#/components/parameters/ProviderOrgId'
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Single provider organization
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderOrganization'
  /usermanagement/api/users/{leafUserId}/{provider}/organizations/{providerOrgId}/{status}:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_Provider'
    - $ref: '#/components/parameters/ProviderOrgId'
    - $ref: '#/components/parameters/Status'
    patch:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Update organization status
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Updated organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderOrganization'
  /usermanagement/api/users/{leafUserId}/{provider}/organizations/sync:
    parameters:
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId'
    - $ref: '#/components/parameters/Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_Provider'
    post:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Trigger organization sync
      security:
      - bearerAuth: []
      responses:
        '202':
          description: Sync initiated
  /usermanagement/api/resources:
    get:
      tags:
      - Leaf API_Reference_Provider_Authentication_Providers_credentials API
      summary: Integration resources summary
      security:
      - bearerAuth: []
      parameters:
      - in: query
        name: provider
        schema:
          type: string
      - in: query
        name: leafUserId
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
      - in: query
        name: size
        schema:
          type: integer
      responses:
        '200':
          description: Summary list
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  summaries:
                    type: array
                    items:
                      type: object
                      properties:
                        provider:
                          type: string
                        leafUserId:
                          type: string
                        growers:
                          type: integer
                        farms:
                          type: integer
                        fields:
                          type: integer
                        syncReferenceTime:
                          type: string
                          format: date-time
  /weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/daily:
    get:
      summary: Get daily forecast by field
      description: "Returns daily forecasted weather data for the specified Leaf user\
        \ field.  \n\u2022 If `startTime`/`endTime` are omitted the next 7 days are\
        \ returned.  \n\u2022 The maximum allowed span is 366 days (`endTime - startTime\
        \ \u2264 366`).  \n\u2022 Default model = `gfs`, default units = `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_LeafUserId'
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_FieldId'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/ForecastModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
  /weather/api/users/{leafUserId}/weather/forecast/field/{fieldId}/hourly:
    get:
      summary: Get hourly forecast by field
      description: "Returns hourly forecasted weather data for the specified Leaf\
        \ user field.  \n\u2022 If `startTime`/`endTime` are omitted the next 7 days\
        \ are returned.  \n\u2022 The maximum allowed span is 30 days (`endTime -\
        \ startTime \u2264 30`).  \n\u2022 Default model = `gfs`, default units =\
        \ `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_LeafUserId'
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_FieldId'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/ForecastModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
  /weather/api/weather/forecast/daily/{lat},{lon}:
    get:
      summary: Get daily forecast for latitude/longitude
      description: "Returns daily forecasted weather data for the supplied coordinates.\
        \  \n\u2022 If `startTime`/`endTime` are omitted the next 7 days are returned.\
        \  \n\u2022 The maximum allowed span is 366 days.  \n\u2022 Default model\
        \ = `gfs`, default units = `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Lat'
      - $ref: '#/components/parameters/Lon'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/ForecastModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
  /weather/api/weather/forecast/hourly/{lat},{lon}:
    get:
      summary: Get hourly forecast for latitude/longitude
      description: "Returns hourly forecasted weather data for the supplied coordinates.\
        \  \n\u2022 If `startTime`/`endTime` are omitted the next 7 days are returned.\
        \  \n\u2022 The maximum allowed span is 30 days.  \n\u2022 Default model =\
        \ `gfs`, default units = `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Lat'
      - $ref: '#/components/parameters/Lon'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/ForecastModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
  /weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/daily:
    get:
      summary: Get daily historical by field
      description: "Returns daily historical weather data for the specified Leaf user\
        \ field.  \n\u2022 Data for the last 5 days is unavailable; use forecast endpoints\
        \ instead.  \n\u2022 Default model = `era5`, default units = `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_LeafUserId'
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_FieldId'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/HistoricalModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
  /weather/api/users/{leafUserId}/weather/historical/field/{fieldId}/hourly:
    get:
      summary: Get hourly historical by field
      description: "Returns hourly historical weather data for the specified Leaf\
        \ user field.  \n\u2022 Data for the last 5 days is unavailable; use forecast\
        \ endpoints instead.  \n\u2022 Default model = `era5`, default units = `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_LeafUserId'
      - $ref: '#/components/parameters/Leaf_API_Reference_Weather_API_FieldId'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/HistoricalModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
  /weather/api/weather/historical/daily/{lat},{lon}:
    get:
      summary: Get daily historical for latitude/longitude
      description: "Returns daily historical weather data for the supplied coordinates.\
        \  \n\u2022 Data for the last 5 days is unavailable; use forecast endpoints\
        \ instead.  \n\u2022 Default model = `era5`, default units = `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Lat'
      - $ref: '#/components/parameters/Lon'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/HistoricalModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
  /weather/api/weather/historical/hourly/{lat},{lon}:
    get:
      summary: Get hourly historical for latitude/longitude
      description: "Returns hourly historical weather data for the supplied coordinates.\
        \  \n\u2022 Data for the last 5 days is unavailable; use forecast endpoints\
        \ instead.  \n\u2022 Default model = `era5`, default units = `metric`.\n"
      parameters:
      - $ref: '#/components/parameters/Lat'
      - $ref: '#/components/parameters/Lon'
      - $ref: '#/components/parameters/StartTime'
      - $ref: '#/components/parameters/EndTime'
      - $ref: '#/components/parameters/HistoricalModel'
      - $ref: '#/components/parameters/Units'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherFeature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
      - bearerAuth: []
      tags:
      - Leaf API_Reference_Weather API
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    WebhookId:
      name: id
      in: path
      required: true
      description: UUID of the webhook.
      schema:
        type: string
        format: uuid
    leafUserId:
      name: leafUserId
      in: path
      required: true
      description: UUID of the Leaf user.
      schema:
        type: string
        format: uuid
    machineId:
      name: machineId
      in: path
      required: true
      description: UUID of the machine.
      schema:
        type: string
        format: uuid
    implementId:
      name: implementId
      in: path
      required: true
      description: UUID of the implement.
      schema:
        type: string
        format: uuid
    operatorId:
      name: operatorId
      in: path
      required: true
      description: UUID of the operator.
      schema:
        type: string
        format: uuid
    page:
      name: page
      in: query
      description: Page number (zero-based). Default 0.
      schema:
        type: integer
        minimum: 0
    size:
      name: size
      in: query
      description: Page size (max 100, default 20).
      schema:
        type: integer
        minimum: 1
        maximum: 100
    sort:
      name: sort
      in: query
      description: Comma-separated list of fields to sort by, optionally suffixed
        with direction (`asc`|`desc`).
      schema:
        type: string
    Page:
      in: query
      name: page
      description: Zero-based page index.
      schema:
        type: integer
        minimum: 0
        default: 0
    Size:
      in: query
      name: size
      description: Page size (max = 100).
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    Sort:
      in: query
      name: sort
      description: Sort criteria, e.g. `id,desc`. Multiple values allowed, first has
        precedence.
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Provider:
      in: query
      name: provider
      description: Data provider filter (currently only `JohnDeere` is supported).
      schema:
        type: string
    LeafUserIdQ:
      in: query
      name: leafUserId
      description: Leaf User UUID scope filter.
      schema:
        type: string
        format: uuid
    MaxResults:
      in: query
      name: maxResults
      description: Max number of results to return.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    Leaf_API_Reference_Beta_Layers_API_leafUserId:
      name: leafUserId
      in: path
      required: true
      description: UUID that identifies the Leaf User.
      schema:
        type: string
        format: uuid
    Leaf_API_Reference_Beta_Prescriptions_API_leafUserId:
      name: leafUserId
      in: path
      required: true
      schema:
        type: string
      description: Leaf user identifier whose provider credentials will be used.
    organizationId:
      name: organizationId
      in: query
      required: true
      schema:
        type: string
      description: John Deere organization identifier.
    fileId:
      name: fileId
      in: query
      required: true
      schema:
        type: string
      description: John Deere file identifier to download.
    companyId:
      name: companyId
      in: query
      required: true
      schema:
        type: string
      description: CNHi company identifier (providerOrganizationId).
    rateAttribute:
      name: rateAttribute
      in: query
      required: true
      schema:
        type: string
      description: Name of the attribute column in the shapefile that contains the
        rate value.
    rateUnit:
      name: rateUnit
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/RateUnit'
      description: Unit associated with the rate values.
    fileName:
      name: fileName
      in: query
      required: false
      schema:
        type: string
      description: Optional file name override for the uploaded prescription.
    LeafUserId:
      name: leafUserId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    FieldId:
      name: fieldId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    BoundaryId:
      name: boundaryId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    FileId:
      name: fileId
      in: path
      required: true
      schema:
        type: string
        format: uuid
    FarmId:
      name: id
      in: path
      required: true
      schema:
        oneOf:
        - type: integer
        - type: string
    GrowerId:
      name: id
      in: path
      required: true
      schema:
        oneOf:
        - type: integer
        - type: string
    OrganizationIdQuery:
      name: organizationId
      in: query
      required: false
      schema:
        type: string
    operationId:
      name: id
      in: path
      required: true
      description: Operation UUID
      schema:
        type: string
        format: uuid
    Leaf_API_Reference_Irrigation_API_leafUserId:
      name: leafUserId
      in: path
      required: true
      description: Leaf user identifier
      schema:
        type: string
    idParam:
      name: id
      in: path
      required: true
      description: Resource identifier
      schema:
        type: string
    fieldId:
      name: fieldId
      in: path
      required: true
      description: Field identifier
      schema:
        type: string
    providerEquipmentId:
      name: providerEquipmentId
      in: query
      required: false
      description: Provider equipment identifier filter
      schema:
        type: string
    equipmentId:
      name: equipmentId
      in: query
      required: false
      description: Leaf equipment identifier filter
      schema:
        type: string
    provider:
      name: provider
      in: query
      required: false
      description: Data provider filter
      schema:
        type: string
        enum:
        - Lindsay
        - Valley
    irrigationId:
      name: irrigationId
      in: query
      required: false
      description: As-applied irrigation identifier filter
      schema:
        type: string
    startTime:
      name: startTime
      in: query
      required: false
      description: Return data with startTime >= this value (ISO-8601)
      schema:
        type: string
        format: date-time
    endTime:
      name: endTime
      in: query
      required: false
      description: Return data with endTime <= this value (ISO-8601)
      schema:
        type: string
        format: date-time
    RelationRole:
      name: relationRole
      in: path
      required: true
      schema:
        type: string
        enum:
        - SENDER
        - RECEIVER
    TargetApiOwner:
      name: targetApiOwner
      in: path
      required: true
      schema:
        type: string
        description: API Owner identifier on the opposite side of the relation.
    ReceiverApiOwner:
      name: receiverApiOwner
      in: path
      required: true
      schema:
        type: string
    Resource:
      name: resource
      in: path
      required: true
      schema:
        type: string
        enum:
        - FIELDS
        - OPERATIONS
    ProviderParam:
      name: provider
      in: path
      required: true
      description: "Provider identifier.  \nAllowed values:  \n\u2022 AgLeader  \n\
        \u2022 ClimateFieldView  \n\u2022 CNHI  \n\u2022 JohnDeere  \n\u2022 Trimble\
        \  \n\u2022 RavenSlingshot  \n\u2022 Stara\n"
      schema:
        type: string
        enum:
        - AgLeader
        - ClimateFieldView
        - CNHI
        - JohnDeere
        - Trimble
        - RavenSlingshot
        - Stara
    AppNameParam:
      name: appName
      in: path
      required: true
      description: Friendly name you assign to the application within a provider.
      schema:
        type: string
    ClientEnvParam:
      name: clientEnvironment
      in: path
      required: true
      description: Environment where the provider application is registered (e.g.
        STAGE or PRODUCTION).
      schema:
        type: string
        enum:
        - STAGE
        - PRODUCTION
    LeafUserIdQuery:
      name: leafUserId
      in: query
      required: true
      description: Leaf User ID whose API keys you want to manage.
      schema:
        type: string
        format: uuid
    Leaf_API_Reference_Machine_File_Conversion_API_FileId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
    BatchIdPath:
      name: id
      in: path
      required: true
      description: UUID of the batch.
      schema:
        type: string
        format: uuid
    Leaf_API_Reference_Manual_File_Upload_API_LeafUserIdQuery:
      name: leafUserId
      in: query
      required: true
      description: UUID of the Leaf User that owns the upload.
      schema:
        type: string
        format: uuid
    ProviderQuery:
      name: provider
      in: query
      required: true
      description: "Data provider of the files inside the zip. Use \"Other\" to let\
        \ Leaf auto\u2013detect."
      schema:
        type: string
        enum:
        - Other
        - Leaf
        - ClimateFieldView
        - CNHI
        - JohnDeere
        - Trimble
        - AgLeader
        - Farmobile
        - PrecisionPlanting
    Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_LeafUserId:
      name: leafUserId
      in: path
      required: true
      description: Leaf User identifier (UUID)
      schema:
        type: string
    Leaf_API_Reference_Provider_Authentication_Providers_credentials_API_Provider:
      name: provider
      in: path
      required: true
      description: Provider identifier (e.g. JohnDeere, Trimble)
      schema:
        type: string
    ProviderOrgId:
      name: providerOrgId
      in: path
      required: true
      description: Provider-side organization identifier
      schema:
        type: string
    Status:
      name: status
      in: path
      required: true
      description: Desired organization status (SELECTED or PREVIEW)
      schema:
        type: string
        enum:
        - SELECTED
        - PREVIEW
    Leaf_API_Reference_Weather_API_LeafUserId:
      name: leafUserId
      in: path
      required: true
      description: Identifier of the Leaf user.
      schema:
        type: string
    Leaf_API_Reference_Weather_API_FieldId:
      name: fieldId
      in: path
      required: true
      description: Identifier of the field.
      schema:
        type: string
    Lat:
      name: lat
      in: path
      required: true
      description: Latitude in decimal degrees.
      schema:
        type: number
        format: double
    Lon:
      name: lon
      in: path
      required: true
      description: Longitude in decimal degrees.
      schema:
        type: number
        format: double
    StartTime:
      name: startTime
      in: query
      required: false
      description: Local start date (YYYY-MM-DD) to filter the time-series.
      schema:
        type: string
        format: date
    EndTime:
      name: endTime
      in: query
      required: false
      description: Local end date (YYYY-MM-DD) to filter the time-series.
      schema:
        type: string
        format: date
    Units:
      name: units
      in: query
      required: false
      description: Unit system to be used in the response.
      schema:
        type: string
        enum:
        - imperial
        - metric
        default: metric
    ForecastModel:
      name: model
      in: query
      required: false
      description: Numerical weather prediction model for forecast data.
      schema:
        type: string
        enum:
        - icon
        - gfs
        - ifs
        - jma
        - gem
        - arpegeArome
        default: gfs
    HistoricalModel:
      name: model
      in: query
      required: false
      description: Reanalysis model for historical data.
      schema:
        type: string
        enum:
        - era5
        - era5Land
        default: era5
  schemas:
    EventType:
      type: string
      description: 'Name of the event that triggers the alert.

        '
      enum:
      - credentialsLimitedPermission
      - credentialsUnauthenticated
      - fieldCreated
      - fieldBoundaryCreated
      - fieldBoundaryUpdated
      - uploadedFileProcessingFinished
      - uploadedFileProcessingFailed
      - providerFileProcessingFinished
      - providerFileProcessingFailed
      - mergedFileProcessingFinished
      - mergedFileProcessingFailed
      - automergedFileProcessingFinished
      - automergedFileProcessingFailed
      - operationCreated
      - operationUpdated
      - operationProcessingFinished
      - newSatelliteImage
      - machineCreated
      - machineUpdated
      - machineDeleted
    WebhookBase:
      type: object
      required:
      - events
      - name
      - secret
      - url
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventType'
          minItems: 1
          description: List of events to subscribe to.
        name:
          type: string
          description: Friendly name for the webhook.
        secret:
          type: string
          description: Secret used to calculate the HMAC-SHA256 signature sent in
            `X-Leaf-Signature`.
        url:
          type: string
          format: uri
          description: Public, HTTPS-accessible endpoint that receives event payloads.
    CreateWebhookRequest:
      allOf:
      - $ref: '#/components/schemas/WebhookBase'
    Webhook:
      allOf:
      - $ref: '#/components/schemas/WebhookBase'
      - type: object
        required:
        - id
        properties:
          id:
            type: string
            format: uuid
            description: Unique identifier for the webhook.
    WebhookArray:
      type: array
      items:
        $ref: '#/components/schemas/Webhook'
    FailedCall:
      type: object
      properties:
        apiOwner:
          type: string
        createdAt:
          type: string
          format: date-time
        url:
          type: string
          format: uri
        status:
          type: integer
        response:
          type: string
          description: Raw HTTP body returned by destination server.
        requestBody:
          type: string
        connectionError:
          type: string
    FailedCallsResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/FailedCall'
    CreateArcgisAlertRequest:
      allOf:
      - $ref: '#/components/schemas/WebhookBase'
    ArcgisAlert:
      allOf:
      - $ref: '#/components/schemas/Webhook'
    Machine:
      type: object
      properties:
        id:
          type: string
          format: uuid
        leafUserId:
          type: string
          format: uuid
        name:
          type: string
        provider:
          type: string
          nullable: true
        providerMachineId:
          type: string
          nullable: true
        providerOrganizationId:
          type: string
          nullable: true
        originType:
          type: string
          enum:
          - USER_CREATED
          - FILE_POOLED
          - PROVIDER_POOLED
        createdTime:
          type: string
          format: date-time
        serialNumber:
          type: string
        vin:
          type: string
        model:
          type: string
        make:
          type: string
        category:
          type: string
        modelYear:
          type: integer
      required:
      - id
      - leafUserId
      - name
    MachineInput:
      type: object
      properties:
        name:
          type: string
        serialNumber:
          type: string
        vin:
          type: string
        model:
          type: string
        make:
          type: string
        category:
          type: string
        modelYear:
          type: integer
      required:
      - name
    MachineUpdate:
      allOf:
      - $ref: '#/components/schemas/MachineInput'
    Measurement:
      type: object
      properties:
        value:
          type: number
        unit:
          type: string
      required:
      - value
      - unit
    MachineFile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        leafFileId:
          type: string
          format: uuid
        machineId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        distance:
          $ref: '#/components/schemas/Measurement'
        fuelConsumption:
          $ref: '#/components/schemas/Measurement'
      required:
      - id
      - leafFileId
      - machineId
    Implement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        provider:
          type: string
        providerImplementId:
          type: string
        providerOrganizationId:
          type: string
        leafUserId:
          type: string
          format: uuid
        originType:
          type: string
          enum:
          - USER_CREATED
          - FILE_POOLED
          - PROVIDER_POOLED
        serialNumber:
          type: string
        model:
          type: string
        make:
          type: string
        category:
          type: string
      required:
      - id
      - name
    Operator:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        provider:
          type: string
        providerOperatorId:
          type: string
        providerOrganizationId:
          type: string
        originType:
          type: string
          enum:
          - USER_CREATED
          - FILE_POOLED
          - PROVIDER_POOLED
        license:
          type: string
          nullable: true
        updatedTime:
          type: string
          format: date-time
        status:
          type: string
      required:
      - id
      - name
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        registrant:
          type: string
        productType:
          type: string
        labelProvider:
          type: string
        providerId:
          type: string
        formulationType:
          type: string
        leafUserId:
          type: string
          format: uuid
        registration:
          type: string
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
        carrier:
          type: boolean
      required:
      - id
      - name
    ProductSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        leafUserId:
          type: string
          format: uuid
      required:
      - id
      - name
    MatchDetails:
      type: object
      properties:
        status:
          type: string
          enum:
          - PREDICTED
          - VALIDATED
        score:
          type: number
          format: float
    ProductMatch:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        productId:
          type: string
          format: uuid
        matchDetails:
          $ref: '#/components/schemas/MatchDetails'
      required:
      - id
      - name
      - matchDetails
    ProductMatchHistory:
      allOf:
      - $ref: '#/components/schemas/ProductMatch'
      - type: object
        properties:
          historicalTime:
            type: string
            format: date-time
    Variety:
      type: object
      properties:
        id:
          type: string
          format: uuid
        crops:
          type: array
          items:
            type: string
        name:
          type: string
        companyName:
          type: string
        status:
          type: string
        leafUserId:
          type: string
          format: uuid
        provider:
          type: string
        providerId:
          type: string
        organizationId:
          type: string
      required:
      - id
      - name
    VarietySummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        leafUserId:
          type: string
          format: uuid
        crops:
          type: array
          items:
            type: string
      required:
      - id
      - name
    TankMix:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        providerId:
          type: string
        formulationType:
          type: string
        targetCrops:
          type: array
          items:
            type: string
        status:
          type: string
        provider:
          type: string
        leafUserId:
          type: string
          format: uuid
      required:
      - id
      - name
    Layer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        leafUserId:
          type: string
          format: uuid
        apiOwnerUsername:
          type: string
        type:
          type: string
          enum:
          - TASSEL_COUNT
          - STAND_COUNT
          - NVDI
          - RGB
        origin:
          type: string
        provider:
          type: string
        providerLayerId:
          type: string
        providerFieldId:
          type: string
        name:
          type: string
        size:
          type: integer
          description: Size of the layer file in bytes.
        md5:
          type: string
          description: MD5 checksum of the file.
        contentS3:
          type: string
          format: uri
        downloadContentS3:
          type: string
          format: uri
        createdTime:
          type: string
          format: date-time
        leafFieldIds:
          type: array
          items:
            type: string
            format: uuid
      required:
      - id
      - leafUserId
      - type
      - name
      - size
      - createdTime
    LayerUploadResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
      - id
      - name
    Prescription:
      type: object
      properties:
        id:
          type: string
          description: Identifier returned by the provider for the prescription.
        name:
          type: string
          description: Human-readable prescription name.
      required:
      - id
      - name
    PrescriptionList:
      type: array
      items:
        $ref: '#/components/schemas/Prescription'
    DownloadUrl:
      type: object
      properties:
        fileUrl:
          type: string
          format: uri
          description: Pre-signed URL used to download the prescription file.
      required:
      - fileUrl
    RateUnit:
      type: string
      enum:
      - gal/ac
      - l/ha
      - lbs/ac
      - ton/ac
      - kg/ha
      - t/ha
      - kS/ac
      - kS/ha
      - lbs(N)/ac
      - kg(N)/ha
      - S/ha
    UUID:
      type: string
      format: uuid
      example: f4c4adb1-6f24-4a37-9bf9-bb3b0d5d6e99
    ApplicationPrescription:
      type: object
      properties:
        prescriptionId:
          $ref: '#/components/schemas/UUID'
        prescriptionUnits:
          type: string
          example: kg/ha
        prescriptionUse:
          type: string
          example: fertilizer
        productId:
          $ref: '#/components/schemas/UUID'
      required:
      - prescriptionId
      - prescriptionUnits
      - prescriptionUse
      - productId
    SeedingPrescription:
      type: object
      properties:
        prescriptionId:
          $ref: '#/components/schemas/UUID'
        prescriptionUnits:
          type: string
          example: seeds/ha
        prescriptionUse:
          type: string
          example: seeding
        varietyId:
          type: string
          example: 34A7
      required:
      - prescriptionId
      - prescriptionUnits
      - prescriptionUse
      - varietyId
    OperationPlan:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        leafUserId:
          $ref: '#/components/schemas/UUID'
        provider:
          type: string
          example: JohnDeere
        providerPlanId:
          $ref: '#/components/schemas/UUID'
        createdAt:
          type: string
          format: date-time
          example: 2024-02-20 10:14:33+00:00
        organizationId:
          type: integer
          example: 12345
        fieldId:
          $ref: '#/components/schemas/UUID'
        applicationPrescriptions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationPrescription'
        seedingPrescriptions:
          type: array
          items:
            $ref: '#/components/schemas/SeedingPrescription'
        workOrder:
          type: string
          example: WO-239
        instructions:
          type: string
          example: Apply at dawn if wind < 10 mph.
        year:
          type: integer
          example: 2024
      required:
      - id
      - leafUserId
      - provider
      - providerPlanId
      - createdAt
      - fieldId
      - applicationPrescriptions
      - seedingPrescriptions
      - year
    OperationPlanCreateRequest:
      type: object
      properties:
        fieldId:
          $ref: '#/components/schemas/UUID'
        applicationPrescriptions:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationPrescription'
        seedingPrescriptions:
          type: array
          items:
            $ref: '#/components/schemas/SeedingPrescription'
        workOrder:
          type: string
          description: Optional work-order identifier for the plan.
        instructions:
          type: string
        year:
          type: integer
          example: 2024
      required:
      - fieldId
      - applicationPrescriptions
      - seedingPrescriptions
      - year
    Configuration:
      type: object
      properties:
        apiOwnerUsername:
          type: string
          description: Username of the API owner that controls the configuration.
          example: api-owner
        leafUserId:
          type: string
          nullable: true
          description: UUID of the Leaf user; empty or null when representing the
            API owner's configuration.
          example: 00000000-0000-0000-0000-000000000000
        operationsImageCreation:
          type: boolean
          example: true
        fieldsAutoSync:
          type: boolean
          example: true
        fieldsMergeIntersection:
          type: number
          format: float
          example: 0.01
        fieldsAttachIntersection:
          type: number
          format: float
          example: 0.01
        fieldsAutoMerge:
          type: boolean
          example: true
      additionalProperties: false
    ConfigurationMutation:
      description: Request body used to create or update a configuration. All fields
        are optional; unspecified properties inherit defaults.
      type: object
      properties:
        operationsImageCreation:
          type: boolean
        fieldsAutoSync:
          type: boolean
        fieldsMergeIntersection:
          type: number
          format: float
        fieldsAttachIntersection:
          type: number
          format: float
        fieldsAutoMerge:
          type: boolean
      additionalProperties: false
      example:
        operationsImageCreation: true
        fieldsAutoSync: true
    Geometry:
      type: object
      description: GeoJSON MultiPolygon geometry in EPSG:4326
      required:
      - type
      - coordinates
      properties:
        type:
          type: string
          enum:
          - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  type: number
    Field:
      type: object
      properties:
        externalId:
          type: string
        createdTime:
          type: string
          format: date-time
        geometry:
          $ref: '#/components/schemas/Geometry'
        providers:
          type: array
          items:
            type: string
            enum:
            - sentinel
            - planet
        extent:
          type: object
          properties:
            xmin:
              type: number
            xmax:
              type: number
            ymin:
              type: number
            ymax:
              type: number
    FieldCreateRequest:
      type: object
      required:
      - externalId
      - geometry
      properties:
        externalId:
          type: string
        startDate:
          type: string
          format: date
          description: ISO-8601 date (yyyy-MM-dd). Mutually exclusive with daysBefore.
        daysBefore:
          type: integer
          minimum: 0
          description: Number of days before today to retrieve historical imagery.
            Mutually exclusive with startDate.
        providers:
          type: array
          description: If omitted, Sentinel imagery will be retrieved by default.
          items:
            type: string
            enum:
            - sentinel
            - planet
        assetTypes:
          type: array
          description: Planet asset types (used when providers includes planet).
          items:
            type: string
        geometry:
          $ref: '#/components/schemas/Geometry'
    ProcessImage:
      type: object
      properties:
        url:
          type: string
          format: uri
        downloadUrl:
          type: string
          format: uri
        type:
          type: string
          enum:
          - tif
          - ndvi
          - png
          - tif_colorized
        resolution:
          type: integer
          description: Resolution in meters
    Process:
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
          format: date-time
        clouds:
          type: number
          minimum: 0
          maximum: 100
        provider:
          type: string
          enum:
          - sentinel
          - planet
        bucketName:
          type: string
        bucketKey:
          type: string
        bucketRegion:
          type: string
        status:
          type: string
          enum:
          - SUCCESS
          - FAILED
          - STARTED
        coverage:
          type: number
          minimum: 0
          maximum: 100
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProcessImage'
        processedTimestamp:
          type: string
          format: date-time
    Subscription:
      type: object
      properties:
        planetAssetTypes:
          type: array
          items:
            type: string
        planetItemTypes:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date-time
    Leaf_API_Reference_Field_Boundary_Management_API_Geometry:
      type: object
      required:
      - type
      - coordinates
      properties:
        type:
          type: string
          enum:
          - MultiPolygon
        coordinates:
          type: array
          description: GeoJSON MultiPolygon coordinates
          items:
            type: array
            items:
              type: array
              items:
                type: array
                items:
                  type: number
                  format: double
      example:
        type: MultiPolygon
        coordinates:
        - - - - -93.48821327980518
              - 41.77137549568163
            - - -93.48817333680519
              - 41.77143534378164
            - - -93.48821327390516
              - 41.76068857977987
            - - -93.48821327980518
              - 41.77137549568163
    Area:
      type: object
      properties:
        value:
          type: number
          format: double
        unit:
          type: string
          example: ha
    Leaf_API_Reference_Field_Boundary_Management_API_Field:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        leafUserId:
          type: string
          format: uuid
        providerName:
          type: string
        providerId:
          type: integer
        providerFieldId:
          type: string
        providerBoundaryId:
          type: string
        providerFieldName:
          type: string
        organizationId:
          type: string
        type:
          type: string
          enum:
          - ORIGINAL
          - MERGED
        status:
          type: string
          enum:
          - PROCESSED
          - PREVIEW
          - WAITING
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
        mergedFieldId:
          type: string
          format: uuid
          nullable: true
        sources:
          type: array
          items:
            type: string
            format: uuid
        boundaries:
          type: array
          items:
            type: string
            format: uuid
        files:
          type: array
          items:
            type: string
            format: uuid
        geometry:
          $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Geometry'
        area:
          $ref: '#/components/schemas/Area'
    FieldCreate:
      type: object
      required:
      - geometry
      properties:
        id:
          type: string
          format: uuid
          description: Optional custom identifier
        name:
          type: string
        geometry:
          $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Geometry'
    FieldUpdate:
      type: object
      properties:
        name:
          type: string
        farmId:
          type: integer
        geometry:
          $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Geometry'
    Boundary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
          - OUTDATED_ON_PROVIDER
          - DELETED_ON_PROVIDER
        providerStatus:
          type: string
          enum:
          - ACTIVE
          - INACTIVE
        providerBoundaryId:
          type: string
        geometry:
          $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Geometry'
        area:
          $ref: '#/components/schemas/Area'
        validity:
          type: string
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
    BoundaryUpdate:
      type: object
      required:
      - geometry
      properties:
        geometry:
          $ref: '#/components/schemas/Leaf_API_Reference_Field_Boundary_Management_API_Geometry'
    OperationFile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        operationType:
          type: string
          enum:
          - harvested
          - planted
          - applied
          - other
        origin:
          type: string
          enum:
          - provider
          - automerged
          - merged
          - uploaded
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        crops:
          type: array
          items:
            type: string
        varieties:
          type: array
          items:
            type: string
        providerFileId:
          type: string
        provider:
          type: string
        leafUserId:
          type: string
          format: uuid
    Farm:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        providerId:
          type: integer
        providerName:
          type: string
        providerFarmId:
          type: string
        providerFarmName:
          type: string
        leafUserId:
          type: string
          format: uuid
        fieldIds:
          type: array
          items:
            type: string
            format: uuid
        growerId:
          type: integer
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
    FarmCreate:
      type: object
      properties:
        name:
          type: string
        growerId:
          type: integer
    Grower:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        leafUserId:
          type: string
          format: uuid
        providerName:
          type: string
        providerId:
          type: integer
        providerGrowerId:
          type: string
        farmIds:
          type: array
          items:
            type: integer
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
    GrowerCreate:
      type: object
      properties:
        name:
          type: string
    UploadStatus:
      type: string
      description: Overall processing status for the whole upload job.
      enum:
      - RECEIVED
      - PROCESSED
      - FAILED
    EntryStatus:
      type: string
      description: Processing status for an individual compatible file inside the
        upload.
      enum:
      - PROCESSING
      - CONVERTED
      - FINISHED
      - FAILED
      - PARTIALLY_FINISHED
    ConverterFormat:
      type: string
      enum:
      - SHAPEFILE
      - GEOJSON
      - KML
    Upload:
      type: object
      properties:
        id:
          type: string
          format: uuid
        leafUserId:
          type: string
          format: uuid
        originalFileUrl:
          type: string
          format: uri
        fileName:
          type: string
        status:
          $ref: '#/components/schemas/UploadStatus'
        createdTime:
          type: string
          format: date-time
      required:
      - id
      - leafUserId
      - status
      - createdTime
    Entry:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fieldId:
          type: array
          items:
            type: string
            format: uuid
        converterFormat:
          $ref: '#/components/schemas/ConverterFormat'
        originalFileUrl:
          type: string
          format: uri
        leafUserId:
          type: string
          format: uuid
        uploadId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/EntryStatus'
        createFieldErrorDetails:
          type: array
          items:
            type: string
            description: JSON-formatted error message.
        createdTime:
          type: string
          format: date-time
        processedTime:
          type: string
          format: date-time
      required:
      - id
      - status
    Operation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        apiOwnerUsername:
          type: string
        leafUserId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
        type:
          type: string
          enum:
          - applied
          - planted
          - harvested
          - tillage
        files:
          type: array
          items:
            type: string
            format: uuid
        fields:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              coverage:
                type: number
        providers:
          type: array
          items:
            type: string
      required:
      - id
      - type
      - startTime
      - endTime
      example:
        id: 5c8fdb34-4dc4-4b96-bfd5-53e6206ce971
        apiOwnerUsername: test
        leafUserId: 7494c90e-28b8-4bb2-9ede-95c1cc894349
        startTime: 2015-04-18 19:31:27+00:00
        endTime: 2015-04-18 19:58:50+00:00
        updatedTime: 2021-08-24 16:00:15.062000+00:00
        type: planted
        files:
        - a10b85c2-ac2e-4b0f-8e65-74edbd2ca53e
        fields:
        - id: 0071484f-4a75-4190-9fd0-f5995d241c2c
        providers:
        - providerName
    OperationSummary:
      description: GeoJSON feature with aggregated statistics for the operation.
      type: object
      additionalProperties: true
      example:
        type: Feature
        properties:
          totalArea:
            value: 319095.75
            unit: m2
          operationType: applied
        geometry:
          type: MultiPolygon
          coordinates: []
    StandardGeojsonLinks:
      type: object
      properties:
        standardGeojson:
          type: string
          format: uri
        downloadStandardGeojson:
          type: string
          format: uri
    StandardGeoparquetLinks:
      type: object
      properties:
        downloadStandardGeoparquet:
          type: string
          format: uri
    FilteredGeojsonLinks:
      type: object
      properties:
        filteredGeojson:
          type: string
          format: uri
        downloadFilteredGeojson:
          type: string
          format: uri
    FilteredGeoparquetLinks:
      type: object
      properties:
        downloadFilteredGeoparquet:
          type: string
          format: uri
    ImagesItem:
      type: object
      properties:
        property:
          type: string
        ramp:
          type: object
          additionalProperties:
            type: array
            items:
              type: integer
              minimum: 0
              maximum: 255
        url:
          type: string
          format: uri
        downloadUrl:
          type: string
          format: uri
      example:
        property: elevation
        ramp:
          0%:
          - 200
          - 0
          - 0
          nv:
          - 0
          - 0
          - 0
          - 0
        url: https://example.com/image.png
        downloadUrl: https://example.com/image.png
    ImagesV2Item:
      type: object
      properties:
        property:
          type: string
        legend:
          type: object
          properties:
            ranges:
              type: array
              items:
                type: object
                properties:
                  colorCode:
                    type: string
                  min:
                    type: number
                  max:
                    type: number
        extent:
          type: object
          properties:
            xmin:
              type: number
            xmax:
              type: number
            ymin:
              type: number
            ymax:
              type: number
        url:
          type: string
          format: uri
        downloadUrl:
          type: string
          format: uri
    GeotiffImageItem:
      type: object
      properties:
        property:
          type: string
        url:
          type: string
          format: uri
        downloadUrl:
          type: string
          format: uri
    UnitsResponse:
      type: object
      additionalProperties:
        type: string
      example:
        speed: mi/hr
        distance: ft
    MachinesResponse:
      type: object
      properties:
        machines:
          type: array
          items:
            type: string
            format: uuid
    ImplementsResponse:
      type: object
      properties:
        implements:
          type: array
          items:
            type: string
            format: uuid
    OperatorsResponse:
      type: object
      properties:
        operators:
          type: array
          items:
            type: string
            format: uuid
    SessionGroup:
      type: object
      properties:
        machineId:
          type: string
          format: uuid
        serialNumber:
          type: string
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/Session'
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        operator:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        implement:
          type: object
          nullable: true
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        area:
          type: object
          properties:
            value:
              type: number
            unit:
              type: string
    CropResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        message:
          type: string
        leafFileId:
          type: string
          format: uuid
    ReprocessResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: Reprocessing started
    Length:
      type: object
      required:
      - value
      - unit
      properties:
        value:
          type: number
        unit:
          type: string
          description: Length unit (m, ft)
    Runtime:
      type: object
      required:
      - value
      - unit
      properties:
        value:
          type: number
        unit:
          type: string
          description: Time unit (hr)
    EquipmentOriginalData:
      type: object
      properties:
        equipmentType:
          type: string
        equipmentSubType:
          type: string
    IrrigationEquipment:
      type: object
      required:
      - id
      - providerEquipmentId
      - provider
      - name
      - type
      properties:
        id:
          type: string
        providerEquipmentId:
          type: string
        provider:
          type: string
          enum:
          - Lindsay
          - Valley
        name:
          type: string
        type:
          type: string
          description: Irrigation system type (e.g., pivot)
        pivotLength:
          $ref: '#/components/schemas/Length'
        endgunLength:
          $ref: '#/components/schemas/Length'
        pivotRuntime:
          $ref: '#/components/schemas/Runtime'
        brand:
          type: string
        originalEquipmentData:
          $ref: '#/components/schemas/EquipmentOriginalData'
    DepthStats:
      type: object
      properties:
        avg:
          type: number
        sum:
          type: number
        min:
          type: number
        max:
          type: number
        unit:
          type: string
          description: Depth unit (mm, in)
    UnitValue:
      type: object
      properties:
        value:
          type: number
        unit:
          type: string
    SummaryProperties:
      type: object
      properties:
        depth:
          $ref: '#/components/schemas/DepthStats'
        totalArea:
          $ref: '#/components/schemas/UnitValue'
        totalVolume:
          $ref: '#/components/schemas/UnitValue'
        totalPowerOn:
          $ref: '#/components/schemas/UnitValue'
        coverage:
          $ref: '#/components/schemas/UnitValue'
    Summary:
      type: object
      required:
      - type
      - properties
      properties:
        type:
          type: string
          enum:
          - Feature
        properties:
          $ref: '#/components/schemas/SummaryProperties'
        geometry:
          type: object
          description: GeoJSON geometry object
    EquipmentReference:
      type: object
      required:
      - id
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        providerEquipmentId:
          type: string
    AppliedIrrigation:
      type: object
      required:
      - id
      - provider
      - leafUserId
      properties:
        id:
          type: string
        provider:
          type: string
          enum:
          - Lindsay
          - Valley
        standardGeojson:
          type: string
          format: uri
        downloadStandardGeojson:
          type: string
          format: uri
        leafUserId:
          type: string
        apiOwnerUsername:
          type: string
          format: email
        summary:
          $ref: '#/components/schemas/Summary'
        equipment:
          type: array
          items:
            $ref: '#/components/schemas/EquipmentReference'
        createdTime:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
    FieldListItem:
      type: object
      required:
      - fieldId
      properties:
        fieldId:
          type: string
        lastIrrigationTime:
          type: string
          format: date-time
    FieldIrrigationRecord:
      allOf:
      - $ref: '#/components/schemas/AppliedIrrigation'
      - type: object
        properties:
          fieldId:
            type: string
          irrigationId:
            type: array
            items:
              type: string
    SharingRelation:
      type: object
      properties:
        senderApiOwner:
          type: string
        receiverApiOwner:
          type: string
        status:
          $ref: '#/components/schemas/RelationStatus'
      required:
      - senderApiOwner
      - receiverApiOwner
      - status
    RelationStatus:
      type: string
      enum:
      - PENDING
      - ALLOWED
      - BLOCKED
    LeafUserPermissionsRequest:
      type: object
      required:
      - permissions
      properties:
        permissions:
          $ref: '#/components/schemas/PermissionsMap'
    LeafUserPermissions:
      allOf:
      - $ref: '#/components/schemas/LeafUserPermissionsRequest'
      - type: object
        properties:
          leafUserId:
            type: string
    PermissionsMap:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ResourcePermission'
      description: Map keyed by resource (`FIELDS`, `OPERATIONS`) and containing granted
        actions.
    ResourcePermission:
      type: object
      required:
      - actions
      properties:
        actions:
          type: array
          items:
            type: string
            enum:
            - READ
        types:
          type: array
          items:
            type: string
            enum:
            - APPLIED
            - HARVESTED
            - PLANTED
          description: Only applicable when resource is `OPERATIONS`.
    Error:
      type: object
      properties:
        message:
          type: string
        correlationId:
          type: string
      required:
      - message
    ApiKey:
      type: object
      properties:
        id:
          type: string
          format: uuid
        key:
          type: string
          description: Redacted API key value.
        leafUserId:
          type: string
          format: uuid
        expiresAt:
          type: string
          format: date-time
        description:
          type: string
        revokedAt:
          type: string
          format: date-time
        valid:
          type: boolean
      required:
      - id
      - key
      - leafUserId
      - expiresAt
      - valid
    ApiKeyCreateRequest:
      type: object
      required:
      - leafUserId
      properties:
        leafUserId:
          type: string
          format: uuid
        expiresIn:
          type: integer
          minimum: 900
          description: Time-to-live in seconds. Defaults to one year when omitted.
        description:
          type: string
    ApiKeyCreateResponse:
      type: object
      properties:
        key:
          type: string
        expiresAt:
          type: string
          format: date-time
        valid:
          type: boolean
      required:
      - key
      - expiresAt
      - valid
    AppKeySummary:
      type: object
      properties:
        provider:
          type: string
        appName:
          type: string
        clientEnvironment:
          type: string
        createdTime:
          type: string
          format: date-time
      required:
      - provider
      - appName
      - clientEnvironment
      - createdTime
    GenericAppKeyRequest:
      type: object
      description: "Provider specific payload.  \nSee public documentation for the\
        \ exact set of required fields for each provider.\n"
      additionalProperties: true
    ProviderCredential:
      type: object
      description: Reference to provider credentials previously created.
      properties:
        id:
          type: string
          format: uuid
      additionalProperties: true
    User:
      type: object
      required:
      - id
      - name
      - email
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        externalId:
          type: string
        trimbleCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        cnhiCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        johnDeereCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        ravenCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        climateFieldViewCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        staraCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        agLeaderCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        ravenSlingshotCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        lindsayCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        valleyCredentials:
          $ref: '#/components/schemas/ProviderCredential'
    CreateUser:
      type: object
      required:
      - name
      - email
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        externalId:
          type: string
        trimbleCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        cnhiCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        johnDeereCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        ravenCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        climateFieldViewCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        staraCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        agLeaderCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        ravenSlingshotCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        lindsayCredentials:
          $ref: '#/components/schemas/ProviderCredential'
        valleyCredentials:
          $ref: '#/components/schemas/ProviderCredential'
    Provider:
      type: string
      enum:
      - CNHI
      - JohnDeere
      - Trimble
      - ClimateFieldView
      - AgLeader
      - RavenSlingshot
      - Stara
      - Leaf
    OperationType:
      type: string
      enum:
      - applied
      - planted
      - harvested
      - tillage
    File:
      type: object
      properties:
        id:
          type: string
          format: uuid
        provider:
          $ref: '#/components/schemas/Provider'
        fields:
          type: array
          items:
            type: string
            format: uuid
        fileFormat:
          type: string
        fileName:
          type: string
        status:
          type: string
          description: Current processing status
        operationType:
          $ref: '#/components/schemas/OperationType'
        origin:
          type: string
          enum:
          - provider
          - automerged
          - merged
          - uploaded
        originalFile:
          type: string
          format: uri
        downloadOriginalFile:
          type: string
          format: uri
        rawGeojson:
          type: string
          format: uri
        downloadRawGeojson:
          type: string
          format: uri
        standardGeojson:
          type: string
          format: uri
        downloadStandardGeojson:
          type: string
          format: uri
        summary:
          type: string
          format: uri
          description: URL to summary resource (present when available)
        leafUserId:
          type: string
          format: uuid
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        sizeInBytes:
          type: integer
          format: int64
      required:
      - id
      - provider
      - fileFormat
      - fileName
      - status
    FileSummary:
      type: object
      description: GeoJSON Feature with operation statistics
      properties:
        type:
          type: string
          example: Feature
        properties:
          type: object
          description: Operation-specific summary metrics
        geometry:
          type: object
          description: Polygon/MultiPolygon covering the operation area
      required:
      - type
      - properties
      - geometry
    Image:
      type: object
      properties:
        property:
          type: string
          description: Operation property represented by the raster
        ramp:
          type: object
          additionalProperties:
            type: array
            items:
              type: integer
          description: "Percentage \u2192 RGBA mapping"
        url:
          type: string
          format: uri
        downloadUrl:
          type: string
          format: uri
    StepStatus:
      type: object
      properties:
        status:
          type: string
          enum:
          - processed
          - failed
          - skipped
          - processing
        message:
          type: string
    FileStatus:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/StepStatus'
      example:
        rawGeojson:
          status: processed
          message: ok
        standardGeojson:
          status: processed
          message: ok
    OutsideFieldGeojson:
      type: object
      properties:
        id:
          type: string
          format: uuid
        fields:
          type: array
          items:
            type: string
            format: uuid
        featureCount:
          type: integer
        outsideFieldGeojson:
          type: string
          format: uri
          description: Public URL for the GeoJSON
        downloadOutsideFieldGeojson:
          type: string
          format: uri
      required:
      - featureCount
      - downloadOutsideFieldGeojson
    MergeRequest:
      type: object
      properties:
        ids:
          type: array
          description: List of file IDs to merge
          items:
            type: string
            format: uuid
      required:
      - ids
    MergeResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          example: SENT_TO_MERGE
      required:
      - id
      - status
    MagicLinkSettings:
      type: object
      properties:
        backgroundColor:
          type: string
          description: Hex color (e.g. "#27ae60")
          example: '#F5F5F5'
        headerImage:
          type: string
          format: uri
        companyLogo:
          type: string
          format: uri
        companyName:
          type: string
        showLeafUserName:
          type: boolean
        disconnectEnabled:
          type: boolean
      additionalProperties: false
    MagicLinkBase:
      type: object
      properties:
        id:
          type: string
          description: Magic Link identifier
          example: magicLinkId
        link:
          type: string
          format: uri
          example: https://magic-link.withleaf.io/magicLinkId
        createdAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
        lastAccessedAt:
          type: string
          format: date-time
        leafUserId:
          type: string
          example: 5a9c66d1-0514-4dc0-99b6-6aadac473e3a
        maxUsage:
          type: integer
          example: 3
        usageCount:
          type: integer
          example: 0
        widget:
          type: string
          enum:
          - PROVIDER
          - AUTHENTICATION
          - FILEUPLOAD
        settings:
          $ref: '#/components/schemas/MagicLinkSettings'
      required:
      - id
      - link
      - createdAt
      - expiresAt
      - leafUserId
      - widget
    ProviderMagicLink:
      allOf:
      - $ref: '#/components/schemas/MagicLinkBase'
      - type: object
        properties:
          allowedProviders:
            $ref: '#/components/schemas/ProviderArray'
    AuthenticationMagicLink:
      allOf:
      - $ref: '#/components/schemas/MagicLinkBase'
      - type: object
        properties:
          provider:
            $ref: '#/components/schemas/Leaf_API_Reference_Magic_Link_API_Provider'
    FileUploadMagicLink:
      allOf:
      - $ref: '#/components/schemas/MagicLinkBase'
    Leaf_API_Reference_Magic_Link_API_Provider:
      type: string
      description: Supported provider
      enum:
      - JohnDeere
      - ClimateFieldView
      - CNHI
      - AgLeader
      - Trimble
      - RavenSlingshot
      - Stara
      - Other
    ProviderArray:
      type: array
      items:
        $ref: '#/components/schemas/Leaf_API_Reference_Magic_Link_API_Provider'
    MagicLinkCreationResponse:
      type: object
      properties:
        id:
          type: string
        leafUserId:
          type: string
        link:
          type: string
          format: uri
        expiresAt:
          type: string
          format: date-time
      required:
      - id
      - leafUserId
      - link
      - expiresAt
    CreateProviderMagicLinkRequest:
      type: object
      properties:
        expiresIn:
          type: integer
          minimum: 900
        allowedProviders:
          $ref: '#/components/schemas/ProviderArray'
        settings:
          $ref: '#/components/schemas/MagicLinkSettings'
      required:
      - allowedProviders
    CreateAuthenticationMagicLinkRequest:
      type: object
      properties:
        expiresIn:
          type: integer
          minimum: 900
        provider:
          $ref: '#/components/schemas/Leaf_API_Reference_Magic_Link_API_Provider'
        settings:
          $ref: '#/components/schemas/MagicLinkSettings'
      required:
      - provider
    CreateFileUploadMagicLinkRequest:
      type: object
      properties:
        expiresIn:
          type: integer
          minimum: 900
        settings:
          $ref: '#/components/schemas/MagicLinkSettings'
    CreateWithLeafUserRequest:
      oneOf:
      - $ref: '#/components/schemas/CreateProviderMagicLinkRequestWithUser'
      - $ref: '#/components/schemas/CreateAuthenticationMagicLinkRequestWithUser'
      - $ref: '#/components/schemas/CreateFileUploadMagicLinkRequestWithUser'
    CreateProviderMagicLinkRequestWithUser:
      allOf:
      - $ref: '#/components/schemas/CreateProviderMagicLinkRequest'
      - type: object
        properties:
          name:
            type: string
          email:
            type: string
            format: email
          externalId:
            type: string
        required:
        - externalId
    CreateAuthenticationMagicLinkRequestWithUser:
      allOf:
      - $ref: '#/components/schemas/CreateAuthenticationMagicLinkRequest'
      - type: object
        properties:
          name:
            type: string
          email:
            type: string
            format: email
          externalId:
            type: string
        required:
        - externalId
    CreateFileUploadMagicLinkRequestWithUser:
      allOf:
      - $ref: '#/components/schemas/CreateFileUploadMagicLinkRequest'
      - type: object
        properties:
          name:
            type: string
          email:
            type: string
            format: email
          externalId:
            type: string
        required:
        - externalId
    BatchStatus:
      type: string
      description: Current processing status of the batch.
      enum:
      - RECEIVED
      - PROCESSED
      - FAILED
    Batch:
      type: object
      required:
      - id
      - leafUserId
      - provider
      - status
      properties:
        id:
          type: string
          format: uuid
        leafUserId:
          type: string
          format: uuid
        fileName:
          type: string
          description: Original name of the uploaded ZIP file.
        size:
          type: integer
          description: File size in bytes.
        provider:
          $ref: '#/components/parameters/ProviderQuery/schema'
        status:
          $ref: '#/components/schemas/BatchStatus'
        statusDetails:
          type: string
          description: Additional information returned when status is FAILED.
        uploadTimestamp:
          type: string
          format: date-time
        leafFiles:
          type: array
          description: List of Leaf File UUIDs generated from this batch.
          items:
            type: string
            format: uuid
    BatchStatusSummary:
      type: object
      description: Consolidated status of each file inside a batch.
      properties:
        converted:
          type: object
          properties:
            leafFiles:
              type: array
              items:
                type: string
                format: uuid
        processing:
          type: object
          properties:
            leafFiles:
              type: array
              items:
                type: string
                format: uuid
        failed:
          type: object
          additionalProperties: {}
          description: "Object keyed by failure category. Each value contains:\n \
            \ \u2022 leafFiles \u2013 array of UUIDs\n  \u2022 status \u2013 string\
            \ (\"failed\")\n  \u2022 message \u2013 human-readable reason\n"
    BaseCredential:
      type: object
      required:
      - id
      - status
      - createdTime
      properties:
        id:
          type: string
        status:
          type: string
        createdTime:
          type: string
          format: date-time
    AgLeaderCredentialRequest:
      type: object
      required:
      - accessToken
      - refreshToken
      - publicKey
      - privateKey
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        publicKey:
          type: string
        privateKey:
          type: string
    AgLeaderCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/AgLeaderCredentialRequest'
    AgvanceCredentialRequest:
      type: object
      required:
      - apiKey
      - clientEnvironment
      - databaseId
      - password
      - username
      properties:
        apiKey:
          type: string
        clientEnvironment:
          type: string
          enum:
          - STAGE
          - PRODUCTION
        databaseId:
          type: string
        password:
          type: string
        username:
          type: string
    AgvanceCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/AgvanceCredentialRequest'
      - type: object
        properties:
          sessionId:
            type: string
    ClimateFieldViewCredentialRequest:
      type: object
      required:
      - clientId
      - clientSecret
      - apiKey
      - refreshToken
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        apiKey:
          type: string
        refreshToken:
          type: string
    ClimateFieldViewCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/ClimateFieldViewCredentialRequest'
      - type: object
        properties:
          accessToken:
            type: string
          tokenMetadata:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: string
    CnhCredentialRequest:
      type: object
      required:
      - clientId
      - clientSecret
      - subscriptionKey
      - refreshToken
      - clientEnvironment
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        subscriptionKey:
          type: string
        refreshToken:
          type: string
        clientEnvironment:
          type: string
          enum:
          - STAGE
          - PRODUCTION
    CnhCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/CnhCredentialRequest'
    JohnDeereCredentialRequest:
      type: object
      required:
      - clientKey
      - clientSecret
      - refreshToken
      - clientEnvironment
      properties:
        clientKey:
          type: string
        clientSecret:
          type: string
        refreshToken:
          type: string
        clientEnvironment:
          type: string
          enum:
          - STAGE
          - PRODUCTION
    JohnDeereCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/JohnDeereCredentialRequest'
      - type: object
        properties:
          accessToken:
            type: string
          tokenMetadata:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: string
    LindsayCredentialRequest:
      type: object
      required:
      - clientId
      - clientSecret
      - refreshToken
      - clientEnvironment
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        refreshToken:
          type: string
        clientEnvironment:
          type: string
          enum:
          - STAGE
          - PRODUCTION
    LindsayCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/LindsayCredentialRequest'
      - type: object
        properties:
          accessToken:
            type: string
          tokenMetadata:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: string
    RavenCredentialRequest:
      type: object
      required:
      - clientId
      - clientSecret
      - refreshToken
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        refreshToken:
          type: string
    RavenCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/RavenCredentialRequest'
      - type: object
        properties:
          accessToken:
            type: string
          tokenMetadata:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: string
    RavenSlingshotCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - type: object
        required:
        - apiKey
        - accessKey
        - sharedSecret
        properties:
          apiKey:
            type: string
          accessKey:
            type: string
          sharedSecret:
            type: string
    SenteraCredentialRequest:
      type: object
      required:
      - username
      - password
      - organizationName
      properties:
        username:
          type: string
        password:
          type: string
        organizationName:
          type: string
    SenteraCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/SenteraCredentialRequest'
      - type: object
        properties:
          authToken:
            type: string
          organizationId:
            type: string
    StaraCredentialRequest:
      type: object
      required:
      - apiKey
      - accessToken
      - accessTokenClient
      - refreshToken
      properties:
        apiKey:
          type: string
        accessToken:
          type: string
        accessTokenClient:
          type: string
        refreshToken:
          type: string
    StaraCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/StaraCredentialRequest'
    TrimbleCredentialRequest:
      type: object
      required:
      - clientId
      - clientSecret
      - refreshToken
      properties:
        clientId:
          type: string
        clientSecret:
          type: string
        refreshToken:
          type: string
    TrimbleCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/TrimbleCredentialRequest'
      - type: object
        properties:
          accessToken:
            type: string
          tokenMetadata:
            type: object
            properties:
              scopes:
                type: array
                items:
                  type: string
    ValleyCredentialRequest:
      type: object
      required:
      - apid
      - initializationVector
      - key
      - username
      - password
      properties:
        apid:
          type: string
        initializationVector:
          type: string
        key:
          type: string
        username:
          type: string
        password:
          type: string
    ValleyCredential:
      allOf:
      - $ref: '#/components/schemas/BaseCredential'
      - $ref: '#/components/schemas/ValleyCredentialRequest'
    EventLog:
      type: object
      required:
      - id
      - createdDate
      - statusCode
      properties:
        id:
          type: string
        createdDate:
          type: string
          format: date-time
        statusCode:
          type: integer
        headers:
          type: string
        body:
          type: string
    ProviderOrganization:
      type: object
      required:
      - providerOrgId
      - providerOrgName
      - status
      properties:
        providerOrgId:
          type: string
        providerOrgName:
          type: string
        status:
          type: string
          enum:
          - SELECTED
          - PREVIEW
          - BLOCKED
        managementUri:
          type: string
    WeatherFeature:
      type: object
      description: GeoJSON feature wrapping weather variables. If data is unavailable
        a property may be null.
      properties:
        type:
          type: string
          enum:
          - Feature
        properties:
          type: object
          description: Time-series of weather variables keyed by variable name.
          additionalProperties: true
        geometry:
          $ref: '#/components/schemas/Leaf_API_Reference_Weather_API_Geometry'
      required:
      - type
      - properties
      - geometry
    Leaf_API_Reference_Weather_API_Geometry:
      type: object
      properties:
        type:
          type: string
          enum:
          - Point
        coordinates:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
            format: double
      required:
      - type
      - coordinates
  responses:
    UnauthorizedError:
      description: Missing or invalid authentication credentials.
    ForbiddenError:
      description: The authenticated user does not have permission to perform this
        action.
    BadRequestError:
      description: The request could not be processed due to invalid input.
    Leaf_API_Reference_Irrigation_API_UnauthorizedError:
      description: Invalid or missing authentication token
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    CredentialCreated:
      description: Credential created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BaseCredential'
    Deleted:
      description: Resource deleted
    BadRequest:
      description: Invalid request parameters.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
    Unauthorized:
      description: Missing or invalid bearer token.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  requestBodies:
    ZipFile:
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            required:
            - file
            properties:
              file:
                type: string
                format: binary
                description: 'ZIP archive containing the required shapefile components
                  (shp, dbf, shx). No sub-folders allowed.

                  '
tags:
- name: Leaf API_Reference_Alerts API
  description: 'Programmatic interface for managing Leaf Alerts webhooks and ArcGIS
    alerts.

    '
- name: Leaf API_Reference_Beta_Assets API
  description: ''
- name: Leaf API_Reference_Beta_Input_Validator API
  description: ''
- name: Leaf API_Reference_Beta_Layers API
  description: Endpoints that allow users to list imagery layers retrieved through
    the Sentera integration and upload new layers to Climate FieldView.
- name: Leaf API_Reference_Beta_Prescriptions API
  description: "Beta endpoints for uploading, listing, and downloading prescriptions\
    \ to and from various equipment providers through Leaf\u2019s unified API.\n"
- name: Leaf API_Reference_Beta_Prescriptions_Operations_Planning API
  description: 'Operations Planning endpoints for creating and listing operation plans
    (a.k.a. Work Plans) on the John Deere platform via Leaf.

    '
- name: Leaf API_Reference_Configurations API
  description: 'Public endpoints for managing API-owner and Leaf-user configurations.

    '
- name: Leaf API_Reference_Crop_Monitoring API
  description: Crop Monitoring endpoints for managing satellite fields and imagery.
- name: Leaf API_Reference_Field_Boundary_Management API
  description: Field, boundary and related resources management for Leaf Agriculture.
- name: Leaf API_Reference_Field_Boundary_Management_Upload_fields API
  description: 'Service for creating Leaf field boundaries from uploaded spatial files.

    '
- name: Leaf API_Reference_Field_Operations API
  description: 'Leaf Field Operations Service


    Base URL: `https://api.withleaf.io/services/operations/api`

    '
- name: Leaf API_Reference_Irrigation API
  description: ''
- name: Leaf API_Reference_Leaf_Connect API
  description: "API Owner\u2013to\u2013API Owner data-sharing and permission management."
- name: Leaf API_Reference_Leaf_Link API
  description: ''
- name: Leaf API_Reference_Leaf_User API
  description: "API endpoints for managing Leaf Users\u2014end-users of your application\
    \ (e.g. growers). All requests must be authenticated with a Bearer token.\n"
- name: Leaf API_Reference_Machine_File_Conversion API
  description: API for retrieving, merging and managing machine operation files converted
    by Leaf
- name: Leaf API_Reference_Magic_Link API
  description: 'REST endpoints used to create, fetch and delete Leaf Magic Links for
    Provider, Authentication and File-Upload widgets.

    '
- name: Leaf API_Reference_Manual_File_Upload API
  description: API for manually uploading agricultural machine files to Leaf for conversion
    and processing.
- name: Leaf API_Reference_Provider_Authentication_Providers_credentials API
  description: 'Programmatic access to Leaf user-management APIs for creating, updating,
    fetching and deleting FMIS provider credentials, troubleshooting events, and managing
    provider organizations.

    '
- name: Leaf API_Reference_Weather API
  description: Weather forecasts and historical observations for Leaf users, fields
    or any latitude/longitude.
